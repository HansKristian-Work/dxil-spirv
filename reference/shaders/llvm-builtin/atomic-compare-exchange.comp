#version 460
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct CmpXchgResult
{
    uint _m0;
    bool _m1;
};

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

shared uint _12[64];

void main()
{
    uint _23 = atomicCompSwap(_12[gl_GlobalInvocationID.x], 20u, 30u);
    memoryBarrierShared();
    imageStore(_8, int(gl_GlobalInvocationID.x), uvec4(CmpXchgResult(_23, _23 == 20u)._m0));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 38
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %16
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %29 "CmpXchgResult"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonReadable
OpDecorate %16 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpConstant %5 64
%10 = OpTypeArray %5 %9
%11 = OpTypePointer Workgroup %10
%12 = OpVariable %11 Workgroup
%14 = OpTypeVector %5 3
%15 = OpTypePointer Input %14
%16 = OpVariable %15 Input
%17 = OpTypePointer Input %5
%19 = OpConstant %5 0
%21 = OpTypePointer Workgroup %5
%24 = OpConstant %5 2
%25 = OpConstant %5 30
%26 = OpConstant %5 20
%27 = OpTypeBool
%29 = OpTypeStruct %5 %27
%31 = OpConstant %5 264
%34 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %36
%36 = OpLabel
%13 = OpLoad %6 %8
%18 = OpAccessChain %17 %16 %19
%20 = OpLoad %5 %18
%22 = OpAccessChain %21 %12 %20
%23 = OpAtomicCompareExchange %5 %22 %24 %19 %19 %25 %26
%28 = OpIEqual %27 %23 %26
%30 = OpCompositeConstruct %29 %23 %28
OpMemoryBarrier %24 %31
%32 = OpCompositeExtract %5 %30 0
%33 = OpShiftLeftLogical %5 %20 %24
%35 = OpCompositeConstruct %34 %32 %32 %32 %32
OpImageWrite %13 %20 %35
OpReturn
OpFunctionEnd
#endif
