#version 460
layout(local_size_x = 4, local_size_y = 1, local_size_z = 1) in;

struct CmpXchgResult
{
    uint _m0;
    bool _m1;
};

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

shared uint _12[4];

void main()
{
    _12[0u] = gl_GlobalInvocationID.x;
    _12[1u] = gl_GlobalInvocationID.y;
    _12[2u] = gl_GlobalInvocationID.z;
    _12[3u] = 10u;
    barrier();
    uint _35 = atomicAdd(_12[3u], 10u);
    uint _37 = atomicCompSwap(_12[2u], 10u, _35);
    imageStore(_8, int(gl_GlobalInvocationID.x), uvec4(_12[gl_GlobalInvocationID.y & 3u]));
    imageStore(_8, int(gl_GlobalInvocationID.z), uvec4(_12[1u] + CmpXchgResult(_37, _37 == 10u)._m0));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 54
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %16
OpExecutionMode %3 LocalSize 4 1 1
OpName %3 "main"
OpName %41 "CmpXchgResult"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonReadable
OpDecorate %16 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpConstant %5 4
%10 = OpTypeArray %5 %9
%11 = OpTypePointer Workgroup %10
%12 = OpVariable %11 Workgroup
%14 = OpTypeVector %5 3
%15 = OpTypePointer Input %14
%16 = OpVariable %15 Input
%17 = OpTypePointer Input %5
%19 = OpConstant %5 0
%22 = OpConstant %5 1
%25 = OpConstant %5 2
%27 = OpTypePointer Workgroup %5
%32 = OpConstant %5 3
%33 = OpConstant %5 10
%34 = OpConstant %5 264
%39 = OpTypeBool
%41 = OpTypeStruct %5 %39
%47 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %53
%53 = OpLabel
%13 = OpLoad %6 %8
%18 = OpAccessChain %17 %16 %19
%20 = OpLoad %5 %18
%21 = OpAccessChain %17 %16 %22
%23 = OpLoad %5 %21
%24 = OpAccessChain %17 %16 %25
%26 = OpLoad %5 %24
%28 = OpAccessChain %27 %12 %19
OpStore %28 %20
%29 = OpAccessChain %27 %12 %22
OpStore %29 %23
%30 = OpAccessChain %27 %12 %25
OpStore %30 %26
%31 = OpAccessChain %27 %12 %32
OpStore %31 %33
OpControlBarrier %25 %25 %34
%36 = OpAccessChain %27 %12 %32
%35 = OpAtomicIAdd %5 %36 %25 %19 %33
%38 = OpAccessChain %27 %12 %25
%37 = OpAtomicCompareExchange %5 %38 %25 %19 %19 %35 %33
%40 = OpIEqual %39 %37 %33
%42 = OpCompositeConstruct %41 %37 %40
%43 = OpCompositeExtract %5 %42 0
%44 = OpBitwiseAnd %5 %23 %32
%45 = OpAccessChain %27 %12 %44
%46 = OpLoad %5 %45
%48 = OpCompositeConstruct %47 %46 %46 %46 %46
OpImageWrite %13 %20 %48
%50 = OpAccessChain %27 %12 %22
%49 = OpLoad %5 %50
%51 = OpIAdd %5 %49 %43
%52 = OpCompositeConstruct %47 %51 %51 %51 %51
OpImageWrite %13 %26 %52
OpReturn
OpFunctionEnd
#endif
