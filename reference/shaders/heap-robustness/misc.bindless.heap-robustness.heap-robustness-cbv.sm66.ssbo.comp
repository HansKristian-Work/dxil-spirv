#version 460
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_buffer_reference_uvec2 : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(buffer_reference) buffer uintPointer;

layout(buffer_reference, buffer_reference_align = 4) buffer uintPointer
{
    uint value;
};

layout(set = 7, binding = 0, std430) readonly buffer AtomicCounters
{
    uvec2 counters[];
} _30;

layout(set = 0, binding = 0, std430) buffer SSBO
{
    uvec4 _m0[];
} _36[];

layout(set = 0, binding = 0, std140) uniform BindlessCBV
{
    vec4 _m0[4096];
} _43[];

layout(set = 10, binding = 20, std140) uniform DescriptorHeapSizeUBO
{
    uint count;
} DescriptorHeapSize;

layout(set = 4, binding = 0, std430) writeonly buffer _54_57
{
    uvec4 _m0[];
} _57[];

layout(set = 5, binding = 0, std140) uniform _59_62
{
    vec4 _m0[4096];
} _62[];

layout(push_constant, std430) uniform RootConstants
{
    uint _m0;
    uint _m1;
    uint _m2;
    uint _m3;
    uint _m4;
    uint _m5;
    uint _m6;
    uint _m7;
} registers;

layout(set = 0, binding = 0) uniform texture2D _13[];
layout(set = 0, binding = 0) uniform sampler _17[];
layout(set = 0, binding = 0) uniform writeonly image2D _21[];
layout(set = 0, binding = 0) uniform writeonly imageBuffer _25[];
layout(set = 3, binding = 0) uniform writeonly image2D _49[];
layout(set = 4, binding = 0) uniform writeonly imageBuffer _52[];
layout(set = 2, binding = 0) uniform sampler _65[];

uint RobustPhysicalAtomicCounter(uvec2 _232, uint _233, uint _234)
{
    uint _249;
    if (any(notEqual(_232, uvec2(0u))))
    {
        uint _246 = atomicAdd(uintPointer(_232).value, _233);
        _249 = _246 + _234;
    }
    else
    {
        _249 = 0u;
    }
    return _249;
}

void main()
{
    uint _73 = gl_GlobalInvocationID.x + 0u;
    uint _86 = gl_GlobalInvocationID.x + 0u;
    vec4 _98 = textureLod(nonuniformEXT(sampler2D(_13[min((registers._m0 + _73), DescriptorHeapSize.count)], _65[registers._m2 + _86])), vec2(0.5), 0.0);
    _57[registers._m4 + 100u]._m0[gl_GlobalInvocationID.x] = uvec4(floatBitsToUint(_98.x), floatBitsToUint(_98.y), floatBitsToUint(_98.z), floatBitsToUint(_98.w));
    barrier();
    imageStore(_49[nonuniformEXT(min((registers._m3 + (gl_GlobalInvocationID.x + 0u)), DescriptorHeapSize.count))], ivec2(uvec2(gl_GlobalInvocationID.x, 0u)), vec4(textureLod(nonuniformEXT(sampler2D(_13[min((registers._m0 + _73), DescriptorHeapSize.count)], _65[registers._m2 + _86])), vec2(0.5), 0.0)));
    barrier();
    imageStore(_52[nonuniformEXT(min((registers._m4 + (gl_GlobalInvocationID.x + 0u)), DescriptorHeapSize.count))], int(gl_GlobalInvocationID.x), vec4(_62[nonuniformEXT(min((registers._m5 + (gl_GlobalInvocationID.x + 0u)), DescriptorHeapSize.count))]._m0[0u]));
    barrier();
    vec4 _195 = textureLod(nonuniformEXT(sampler2D(_13[min((registers._m0 + _73), DescriptorHeapSize.count)], _65[registers._m2 + _86])), vec2(0.5), 0.0);
    uint _201 = gl_GlobalInvocationID.x + 0u;
    _57[nonuniformEXT(min((registers._m4 + _201), DescriptorHeapSize.count))]._m0[gl_GlobalInvocationID.x] = uvec4(floatBitsToUint(_195.x), floatBitsToUint(_195.y), floatBitsToUint(_195.z), floatBitsToUint(_195.w));
    barrier();
    uvec2 _230 = _30.counters[min((registers._m4 + _201), DescriptorHeapSize.count)];
    uint _251 = RobustPhysicalAtomicCounter(_230, 1u, 0u);
    barrier();
    uint _274 = gl_GlobalInvocationID.x + 400u;
    uvec2 _285 = _30.counters[min(_274, DescriptorHeapSize.count)];
    vec4 _294 = textureLod(nonuniformEXT(sampler2D(_13[min(gl_GlobalInvocationID.x, DescriptorHeapSize.count)], _17[gl_GlobalInvocationID.x + 100u])), vec2(0.5), 0.0);
    _57[registers._m4 + 100u]._m0[gl_GlobalInvocationID.x] = uvec4(floatBitsToUint(_294.x), floatBitsToUint(_294.y), floatBitsToUint(_294.z), floatBitsToUint(_294.w));
    barrier();
    imageStore(_21[nonuniformEXT(min((gl_GlobalInvocationID.x + 200u), DescriptorHeapSize.count))], ivec2(uvec2(gl_GlobalInvocationID.x, 0u)), vec4(textureLod(nonuniformEXT(sampler2D(_13[min(gl_GlobalInvocationID.x, DescriptorHeapSize.count)], _17[gl_GlobalInvocationID.x + 100u])), vec2(0.5), 0.0)));
    barrier();
    imageStore(_25[nonuniformEXT(min((gl_GlobalInvocationID.x + 300u), DescriptorHeapSize.count))], int(gl_GlobalInvocationID.x), vec4(_43[nonuniformEXT(min((gl_GlobalInvocationID.x + 500u), DescriptorHeapSize.count))]._m0[0u]));
    barrier();
    vec4 _325 = textureLod(nonuniformEXT(sampler2D(_13[min(gl_GlobalInvocationID.x, DescriptorHeapSize.count)], _17[gl_GlobalInvocationID.x + 100u])), vec2(0.5), 0.0);
    _36[nonuniformEXT(min(_274, DescriptorHeapSize.count))]._m0[gl_GlobalInvocationID.x] = uvec4(floatBitsToUint(_325.x), floatBitsToUint(_325.y), floatBitsToUint(_325.z), floatBitsToUint(_325.w));
    barrier();
    uint _337 = RobustPhysicalAtomicCounter(_285, 1u, 0u);
    barrier();
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 340
; Schema: 0
OpCapability Shader
OpCapability UniformBufferArrayDynamicIndexing
OpCapability SampledImageArrayDynamicIndexing
OpCapability StorageBufferArrayDynamicIndexing
OpCapability StorageImageArrayDynamicIndexing
OpCapability ImageBuffer
OpCapability StorageImageWriteWithoutFormat
OpCapability RuntimeDescriptorArray
OpCapability StorageTexelBufferArrayDynamicIndexing
OpCapability UniformBufferArrayNonUniformIndexing
OpCapability SampledImageArrayNonUniformIndexing
OpCapability StorageBufferArrayNonUniformIndexing
OpCapability StorageImageArrayNonUniformIndexing
OpCapability StorageTexelBufferArrayNonUniformIndexing
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
%83 = OpExtInstImport "GLSL.std.450"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint GLCompute %3 "main" %68
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %6 "RootConstants"
OpName %8 "registers"
OpName %28 "AtomicCounters"
OpMemberName %28 0 "counters"
OpName %33 "SSBO"
OpName %40 "BindlessCBV"
OpName %44 "DescriptorHeapSizeUBO"
OpMemberName %44 0 "count"
OpName %46 "DescriptorHeapSize"
OpName %54 "SSBO"
OpName %59 "BindlessCBV"
OpName %235 "RobustPhysicalAtomicCounter"
OpDecorate %6 Block
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 4
OpMemberDecorate %6 2 Offset 8
OpMemberDecorate %6 3 Offset 12
OpMemberDecorate %6 4 Offset 16
OpMemberDecorate %6 5 Offset 20
OpMemberDecorate %6 6 Offset 24
OpMemberDecorate %6 7 Offset 28
OpDecorate %13 DescriptorSet 0
OpDecorate %13 Binding 0
OpDecorate %17 DescriptorSet 0
OpDecorate %17 Binding 0
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 0
OpDecorate %21 NonReadable
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 0
OpDecorate %25 NonReadable
OpDecorate %27 ArrayStride 8
OpDecorate %28 Block
OpMemberDecorate %28 0 Offset 0
OpMemberDecorate %28 0 NonWritable
OpDecorate %30 DescriptorSet 7
OpDecorate %30 Binding 0
OpDecorate %30 AliasedPointer
OpDecorate %32 ArrayStride 16
OpMemberDecorate %33 0 Offset 0
OpDecorate %33 Block
OpDecorate %36 DescriptorSet 0
OpDecorate %36 Binding 0
OpDecorate %39 ArrayStride 16
OpDecorate %40 Block
OpMemberDecorate %40 0 Offset 0
OpDecorate %43 DescriptorSet 0
OpDecorate %43 Binding 0
OpDecorate %44 Block
OpMemberDecorate %44 0 Offset 0
OpDecorate %46 DescriptorSet 10
OpDecorate %46 Binding 20
OpDecorate %49 DescriptorSet 3
OpDecorate %49 Binding 0
OpDecorate %49 NonReadable
OpDecorate %52 DescriptorSet 4
OpDecorate %52 Binding 0
OpDecorate %52 NonReadable
OpDecorate %53 ArrayStride 16
OpMemberDecorate %54 0 Offset 0
OpDecorate %54 Block
OpDecorate %57 DescriptorSet 4
OpDecorate %57 Binding 0
OpDecorate %57 NonReadable
OpDecorate %58 ArrayStride 16
OpDecorate %59 Block
OpMemberDecorate %59 0 Offset 0
OpDecorate %62 DescriptorSet 5
OpDecorate %62 Binding 0
OpDecorate %65 DescriptorSet 2
OpDecorate %65 Binding 0
OpDecorate %68 BuiltIn GlobalInvocationId
OpDecorate %84 NonUniform
OpDecorate %85 NonUniform
OpDecorate %92 NonUniform
OpDecorate %93 NonUniform
OpDecorate %95 NonUniform
OpDecorate %126 NonUniform
OpDecorate %127 NonUniform
OpDecorate %131 NonUniform
OpDecorate %132 NonUniform
OpDecorate %133 NonUniform
OpDecorate %149 NonUniform
OpDecorate %150 NonUniform
OpDecorate %162 NonUniform
OpDecorate %155 NonUniform
OpDecorate %164 NonUniform
OpDecorate %178 NonUniform
OpDecorate %179 NonUniform
OpDecorate %187 NonUniform
OpDecorate %188 NonUniform
OpDecorate %192 NonUniform
OpDecorate %193 NonUniform
OpDecorate %194 NonUniform
OpDecorate %208 NonUniform
OpDecorate %202 NonUniform
OpDecorate %214 NonUniform
OpDecorate %221 NonUniform
OpDecorate %215 NonUniform
OpDecorate %255 NonUniform
OpDecorate %256 NonUniform
OpDecorate %257 NonUniform
OpDecorate %259 NonUniform
OpDecorate %265 NonUniform
OpDecorate %266 NonUniform
OpDecorate %272 NonUniform
OpDecorate %273 NonUniform
OpDecorate %280 NonUniform
OpDecorate %277 NonUniform
OpDecorate %292 NonUniform
OpDecorate %289 NonUniform
OpDecorate %293 NonUniform
OpDecorate %318 NonUniform
OpDecorate %336 NonUniform
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeStruct %5 %5 %5 %5 %5 %5 %5 %5
%7 = OpTypePointer PushConstant %6
%8 = OpVariable %7 PushConstant
%9 = OpTypeFloat 32
%10 = OpTypeImage %9 2D 0 0 0 1 Unknown
%11 = OpTypeRuntimeArray %10
%12 = OpTypePointer UniformConstant %11
%13 = OpVariable %12 UniformConstant
%14 = OpTypeSampler
%15 = OpTypeRuntimeArray %14
%16 = OpTypePointer UniformConstant %15
%17 = OpVariable %16 UniformConstant
%18 = OpTypeImage %9 2D 0 0 0 2 Unknown
%19 = OpTypeRuntimeArray %18
%20 = OpTypePointer UniformConstant %19
%21 = OpVariable %20 UniformConstant
%22 = OpTypeImage %9 Buffer 0 0 0 2 Unknown
%23 = OpTypeRuntimeArray %22
%24 = OpTypePointer UniformConstant %23
%25 = OpVariable %24 UniformConstant
%26 = OpTypeVector %5 2
%27 = OpTypeRuntimeArray %26
%28 = OpTypeStruct %27
%29 = OpTypePointer StorageBuffer %28
%30 = OpVariable %29 StorageBuffer
%31 = OpTypeVector %5 4
%32 = OpTypeRuntimeArray %31
%33 = OpTypeStruct %32
%34 = OpTypeRuntimeArray %33
%35 = OpTypePointer StorageBuffer %34
%36 = OpVariable %35 StorageBuffer
%37 = OpTypeVector %9 4
%38 = OpConstant %5 4096
%39 = OpTypeArray %37 %38
%40 = OpTypeStruct %39
%41 = OpTypeRuntimeArray %40
%42 = OpTypePointer Uniform %41
%43 = OpVariable %42 Uniform
%44 = OpTypeStruct %5
%45 = OpTypePointer Uniform %44
%46 = OpVariable %45 Uniform
%47 = OpTypeRuntimeArray %18
%48 = OpTypePointer UniformConstant %47
%49 = OpVariable %48 UniformConstant
%50 = OpTypeRuntimeArray %22
%51 = OpTypePointer UniformConstant %50
%52 = OpVariable %51 UniformConstant
%53 = OpTypeRuntimeArray %31
%54 = OpTypeStruct %53
%55 = OpTypeRuntimeArray %54
%56 = OpTypePointer StorageBuffer %55
%57 = OpVariable %56 StorageBuffer
%58 = OpTypeArray %37 %38
%59 = OpTypeStruct %58
%60 = OpTypeRuntimeArray %59
%61 = OpTypePointer Uniform %60
%62 = OpVariable %61 Uniform
%63 = OpTypeRuntimeArray %14
%64 = OpTypePointer UniformConstant %63
%65 = OpVariable %64 UniformConstant
%66 = OpTypeVector %5 3
%67 = OpTypePointer Input %66
%68 = OpVariable %67 Input
%69 = OpTypePointer Input %5
%71 = OpConstant %5 0
%74 = OpTypePointer UniformConstant %10
%76 = OpTypePointer PushConstant %5
%80 = OpTypePointer Uniform %5
%87 = OpTypePointer UniformConstant %14
%90 = OpConstant %5 2
%94 = OpTypeSampledImage %10
%96 = OpConstant %9 0.5
%97 = OpConstant %9 0
%99 = OpTypeVector %9 2
%105 = OpTypePointer StorageBuffer %54
%108 = OpConstant %5 4
%111 = OpConstant %5 100
%117 = OpTypePointer StorageBuffer %31
%119 = OpConstant %5 264
%141 = OpTypePointer UniformConstant %18
%144 = OpConstant %5 3
%154 = OpTypePointer Uniform %59
%157 = OpConstant %5 5
%163 = OpTypePointer Uniform %37
%171 = OpTypePointer UniformConstant %22
%222 = OpTypePointer StorageBuffer %26
%231 = OpTypeFunction %5 %26 %5 %5
%239 = OpTypeBool
%240 = OpTypeVector %239 2
%241 = OpConstantNull %26
%244 = OpTypePointer PhysicalStorageBuffer %5
%247 = OpConstant %5 1
%261 = OpConstant %5 200
%268 = OpConstant %5 300
%275 = OpConstant %5 400
%276 = OpTypePointer StorageBuffer %33
%287 = OpConstant %5 500
%288 = OpTypePointer Uniform %40
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %338
%338 = OpLabel
%70 = OpAccessChain %69 %68 %71
%72 = OpLoad %5 %70
%73 = OpIAdd %5 %72 %71
%77 = OpAccessChain %76 %8 %71
%78 = OpLoad %5 %77
%79 = OpIAdd %5 %78 %73
%81 = OpAccessChain %80 %46 %71
%82 = OpLoad %5 %81
%84 = OpExtInst %5 %83 UMin %79 %82
%75 = OpAccessChain %74 %13 %84
%85 = OpLoad %10 %75
%86 = OpIAdd %5 %72 %71
%89 = OpAccessChain %76 %8 %90
%91 = OpLoad %5 %89
%92 = OpIAdd %5 %91 %86
%88 = OpAccessChain %87 %65 %92
%93 = OpLoad %14 %88
%95 = OpSampledImage %94 %85 %93
%100 = OpCompositeConstruct %99 %96 %96
%98 = OpImageSampleExplicitLod %37 %95 %100 Lod %97
%101 = OpCompositeExtract %9 %98 0
%102 = OpCompositeExtract %9 %98 1
%103 = OpCompositeExtract %9 %98 2
%104 = OpCompositeExtract %9 %98 3
%107 = OpAccessChain %76 %8 %108
%109 = OpLoad %5 %107
%110 = OpIAdd %5 %109 %111
%106 = OpAccessChain %105 %57 %110
%112 = OpBitcast %5 %101
%113 = OpBitcast %5 %102
%114 = OpBitcast %5 %103
%115 = OpBitcast %5 %104
%116 = OpCompositeConstruct %31 %112 %113 %114 %115
%118 = OpAccessChain %117 %106 %71 %72
OpStore %118 %116
OpControlBarrier %90 %90 %119
%121 = OpAccessChain %76 %8 %71
%122 = OpLoad %5 %121
%123 = OpIAdd %5 %122 %73
%124 = OpAccessChain %80 %46 %71
%125 = OpLoad %5 %124
%126 = OpExtInst %5 %83 UMin %123 %125
%120 = OpAccessChain %74 %13 %126
%127 = OpLoad %10 %120
%129 = OpAccessChain %76 %8 %90
%130 = OpLoad %5 %129
%131 = OpIAdd %5 %130 %86
%128 = OpAccessChain %87 %65 %131
%132 = OpLoad %14 %128
%133 = OpSampledImage %94 %127 %132
%135 = OpCompositeConstruct %99 %96 %96
%134 = OpImageSampleExplicitLod %37 %133 %135 Lod %97
%136 = OpCompositeExtract %9 %134 0
%137 = OpCompositeExtract %9 %134 1
%138 = OpCompositeExtract %9 %134 2
%139 = OpCompositeExtract %9 %134 3
%140 = OpIAdd %5 %72 %71
%143 = OpAccessChain %76 %8 %144
%145 = OpLoad %5 %143
%146 = OpIAdd %5 %145 %140
%147 = OpAccessChain %80 %46 %71
%148 = OpLoad %5 %147
%149 = OpExtInst %5 %83 UMin %146 %148
%142 = OpAccessChain %141 %49 %149
%150 = OpLoad %18 %142
%151 = OpCompositeConstruct %26 %72 %71
%152 = OpCompositeConstruct %37 %136 %137 %138 %139
OpImageWrite %150 %151 %152
OpControlBarrier %90 %90 %119
%153 = OpIAdd %5 %72 %71
%156 = OpAccessChain %76 %8 %157
%158 = OpLoad %5 %156
%159 = OpIAdd %5 %158 %153
%160 = OpAccessChain %80 %46 %71
%161 = OpLoad %5 %160
%162 = OpExtInst %5 %83 UMin %159 %161
%155 = OpAccessChain %154 %62 %162
%164 = OpAccessChain %163 %155 %71 %71
%165 = OpLoad %37 %164
%166 = OpCompositeExtract %9 %165 0
%167 = OpCompositeExtract %9 %165 1
%168 = OpCompositeExtract %9 %165 2
%169 = OpCompositeExtract %9 %165 3
%170 = OpIAdd %5 %72 %71
%173 = OpAccessChain %76 %8 %108
%174 = OpLoad %5 %173
%175 = OpIAdd %5 %174 %170
%176 = OpAccessChain %80 %46 %71
%177 = OpLoad %5 %176
%178 = OpExtInst %5 %83 UMin %175 %177
%172 = OpAccessChain %171 %52 %178
%179 = OpLoad %22 %172
%180 = OpCompositeConstruct %37 %166 %167 %168 %169
OpImageWrite %179 %72 %180
OpControlBarrier %90 %90 %119
%182 = OpAccessChain %76 %8 %71
%183 = OpLoad %5 %182
%184 = OpIAdd %5 %183 %73
%185 = OpAccessChain %80 %46 %71
%186 = OpLoad %5 %185
%187 = OpExtInst %5 %83 UMin %184 %186
%181 = OpAccessChain %74 %13 %187
%188 = OpLoad %10 %181
%190 = OpAccessChain %76 %8 %90
%191 = OpLoad %5 %190
%192 = OpIAdd %5 %191 %86
%189 = OpAccessChain %87 %65 %192
%193 = OpLoad %14 %189
%194 = OpSampledImage %94 %188 %193
%196 = OpCompositeConstruct %99 %96 %96
%195 = OpImageSampleExplicitLod %37 %194 %196 Lod %97
%197 = OpCompositeExtract %9 %195 0
%198 = OpCompositeExtract %9 %195 1
%199 = OpCompositeExtract %9 %195 2
%200 = OpCompositeExtract %9 %195 3
%201 = OpIAdd %5 %72 %71
%203 = OpAccessChain %76 %8 %108
%204 = OpLoad %5 %203
%205 = OpIAdd %5 %204 %201
%206 = OpAccessChain %80 %46 %71
%207 = OpLoad %5 %206
%208 = OpExtInst %5 %83 UMin %205 %207
%202 = OpAccessChain %105 %57 %208
%209 = OpBitcast %5 %197
%210 = OpBitcast %5 %198
%211 = OpBitcast %5 %199
%212 = OpBitcast %5 %200
%213 = OpCompositeConstruct %31 %209 %210 %211 %212
%214 = OpAccessChain %117 %202 %71 %72
OpStore %214 %213
OpControlBarrier %90 %90 %119
%216 = OpAccessChain %76 %8 %108
%217 = OpLoad %5 %216
%218 = OpIAdd %5 %217 %201
%219 = OpAccessChain %80 %46 %71
%220 = OpLoad %5 %219
%221 = OpExtInst %5 %83 UMin %218 %220
%215 = OpAccessChain %105 %57 %221
%224 = OpAccessChain %76 %8 %108
%225 = OpLoad %5 %224
%226 = OpIAdd %5 %225 %201
%227 = OpAccessChain %80 %46 %71
%228 = OpLoad %5 %227
%229 = OpExtInst %5 %83 UMin %226 %228
%223 = OpAccessChain %222 %30 %71 %229
%230 = OpLoad %26 %223
%251 = OpFunctionCall %5 %235 %230 %247 %71
OpControlBarrier %90 %90 %119
%253 = OpAccessChain %80 %46 %71
%254 = OpLoad %5 %253
%255 = OpExtInst %5 %83 UMin %72 %254
%252 = OpAccessChain %74 %13 %255
%256 = OpLoad %10 %252
%257 = OpIAdd %5 %72 %111
%258 = OpAccessChain %87 %17 %257
%259 = OpLoad %14 %258
%260 = OpIAdd %5 %72 %261
%263 = OpAccessChain %80 %46 %71
%264 = OpLoad %5 %263
%265 = OpExtInst %5 %83 UMin %260 %264
%262 = OpAccessChain %141 %21 %265
%266 = OpLoad %18 %262
%267 = OpIAdd %5 %72 %268
%270 = OpAccessChain %80 %46 %71
%271 = OpLoad %5 %270
%272 = OpExtInst %5 %83 UMin %267 %271
%269 = OpAccessChain %171 %25 %272
%273 = OpLoad %22 %269
%274 = OpIAdd %5 %72 %275
%278 = OpAccessChain %80 %46 %71
%279 = OpLoad %5 %278
%280 = OpExtInst %5 %83 UMin %274 %279
%277 = OpAccessChain %276 %36 %280
%282 = OpAccessChain %80 %46 %71
%283 = OpLoad %5 %282
%284 = OpExtInst %5 %83 UMin %274 %283
%281 = OpAccessChain %222 %30 %71 %284
%285 = OpLoad %26 %281
%286 = OpIAdd %5 %72 %287
%290 = OpAccessChain %80 %46 %71
%291 = OpLoad %5 %290
%292 = OpExtInst %5 %83 UMin %286 %291
%289 = OpAccessChain %288 %43 %292
%293 = OpSampledImage %94 %256 %259
%295 = OpCompositeConstruct %99 %96 %96
%294 = OpImageSampleExplicitLod %37 %293 %295 Lod %97
%296 = OpCompositeExtract %9 %294 0
%297 = OpCompositeExtract %9 %294 1
%298 = OpCompositeExtract %9 %294 2
%299 = OpCompositeExtract %9 %294 3
%301 = OpAccessChain %76 %8 %108
%302 = OpLoad %5 %301
%303 = OpIAdd %5 %302 %111
%300 = OpAccessChain %105 %57 %303
%304 = OpBitcast %5 %296
%305 = OpBitcast %5 %297
%306 = OpBitcast %5 %298
%307 = OpBitcast %5 %299
%308 = OpCompositeConstruct %31 %304 %305 %306 %307
%309 = OpAccessChain %117 %300 %71 %72
OpStore %309 %308
OpControlBarrier %90 %90 %119
%311 = OpCompositeConstruct %99 %96 %96
%310 = OpImageSampleExplicitLod %37 %293 %311 Lod %97
%312 = OpCompositeExtract %9 %310 0
%313 = OpCompositeExtract %9 %310 1
%314 = OpCompositeExtract %9 %310 2
%315 = OpCompositeExtract %9 %310 3
%316 = OpCompositeConstruct %26 %72 %71
%317 = OpCompositeConstruct %37 %312 %313 %314 %315
OpImageWrite %266 %316 %317
OpControlBarrier %90 %90 %119
%318 = OpAccessChain %163 %289 %71 %71
%319 = OpLoad %37 %318
%320 = OpCompositeExtract %9 %319 0
%321 = OpCompositeExtract %9 %319 1
%322 = OpCompositeExtract %9 %319 2
%323 = OpCompositeExtract %9 %319 3
%324 = OpCompositeConstruct %37 %320 %321 %322 %323
OpImageWrite %273 %72 %324
OpControlBarrier %90 %90 %119
%326 = OpCompositeConstruct %99 %96 %96
%325 = OpImageSampleExplicitLod %37 %293 %326 Lod %97
%327 = OpCompositeExtract %9 %325 0
%328 = OpCompositeExtract %9 %325 1
%329 = OpCompositeExtract %9 %325 2
%330 = OpCompositeExtract %9 %325 3
%331 = OpBitcast %5 %327
%332 = OpBitcast %5 %328
%333 = OpBitcast %5 %329
%334 = OpBitcast %5 %330
%335 = OpCompositeConstruct %31 %331 %332 %333 %334
%336 = OpAccessChain %117 %277 %71 %72
OpStore %336 %335
OpControlBarrier %90 %90 %119
%337 = OpFunctionCall %5 %235 %285 %247 %71
OpControlBarrier %90 %90 %119
OpReturn
OpFunctionEnd
%235 = OpFunction %5 None %231
%232 = OpFunctionParameter %26
%233 = OpFunctionParameter %5
%234 = OpFunctionParameter %5
%236 = OpLabel
%242 = OpINotEqual %240 %232 %241
%243 = OpAny %239 %242
OpSelectionMerge %238 None
OpBranchConditional %243 %237 %238
%237 = OpLabel
%245 = OpBitcast %244 %232
%246 = OpAtomicIAdd %5 %245 %247 %71 %233
%248 = OpIAdd %5 %246 %234
OpBranch %238
%238 = OpLabel
%249 = OpPhi %5 %71 %236 %248 %237
OpReturnValue %249
OpFunctionEnd
#endif
