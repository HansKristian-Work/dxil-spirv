#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_KHR_shader_subgroup_ballot : require

struct _23
{
    vec4 _m0;
};

layout(shaderRecordEXT, std430) buffer SBTBlock
{
    uint _m0[5];
    uint _m1[6];
    uvec2 _m2;
    uvec2 _m3;
    uvec2 _m4;
    uvec2 _m5;
    uvec2 _m6;
    uvec2 _m7;
    uvec2 _m8;
    uvec2 _m9;
    uvec2 _m10;
} SBT;

layout(set = 0, binding = 0, std430) restrict readonly buffer RTASHeap
{
    uvec2 _m0[];
} _20;

layout(set = 10, binding = 10, std430) buffer DescriptorHeapGlobalQAData
{
    uvec2 failed_shader_hash;
    uint failed_offset;
    uint failed_heap;
    uint failed_cookie;
    uint fault_atomic;
    uint failed_instruction;
    uint failed_descriptor_type_mask;
    uint actual_descriptor_type_mask;
    uint fault_type;
    uint live_status_table[];
} QAGlobalData;

layout(set = 10, binding = 11, std430) readonly buffer DescriptorHeapQAData
{
    uint descriptor_count;
    uint heap_index;
    uvec2 cookies_descriptor_info[];
} QAHeapData;

layout(push_constant, std430) uniform RootConstants
{
    uint _m0;
    uint _m1;
    uint _m2;
    uint _m3;
    uint _m4;
    uint _m5;
    uint _m6;
    uint _m7;
} registers;

layout(location = 0) rayPayloadEXT _23 _25;
layout(location = 1) rayPayloadEXT _23 _26;
layout(location = 2) rayPayloadEXT _23 _27;
layout(location = 3) rayPayloadEXT _23 _28;

void descriptor_qa_report_fault(uint fault_type, uint heap_offset, uint cookie, uint heap_index, uint descriptor_type, uint actual_descriptor_type, uint instruction)
{
    uint _53 = atomicAdd(QAGlobalData.fault_atomic, 1u);
    if (_53 == 0u)
    {
        QAGlobalData.failed_cookie = cookie;
        QAGlobalData.failed_offset = heap_offset;
        QAGlobalData.failed_heap = heap_index;
        QAGlobalData.failed_descriptor_type_mask = descriptor_type;
        QAGlobalData.actual_descriptor_type_mask = actual_descriptor_type;
        QAGlobalData.failed_instruction = instruction;
        QAGlobalData.failed_shader_hash = uvec2(3735928559u, 0u);
        memoryBarrierBuffer();
        QAGlobalData.fault_type = fault_type;
    }
}

uint descriptor_qa_check(uint heap_offset, uint descriptor_type_mask, uint instruction)
{
    uint _87 = QAHeapData.descriptor_count;
    uint _89 = QAHeapData.heap_index;
    uvec2 _91 = QAHeapData.cookies_descriptor_info[heap_offset];
    uint _99 = QAGlobalData.live_status_table[_91.x >> 5u];
    uint _110 = (uint(heap_offset >= _87) | (((_91.y & descriptor_type_mask) == descriptor_type_mask) ? 0u : 2u)) | (((_99 & (1u << (_91.x & 31u))) != 0u) ? 0u : 4u);
    if (_110 != 0u)
    {
        descriptor_qa_report_fault(_110, heap_offset, _91.x, _89, descriptor_type_mask, _91.y, instruction);
        return _87;
    }
    return heap_offset;
}

void main()
{
    uint _35 = descriptor_qa_check(registers._m0 + 110u, 320u, 1u);
    _28._m0 = vec4(1.0, 2.0, 3.0, 4.0);
    traceRayEXT(accelerationStructureEXT(_20._m0[subgroupBroadcastFirst(_35)]), 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 3);
    uint _138 = descriptor_qa_check(registers._m0 + 3u, 320u, 2u);
    _27._m0 = _28._m0;
    traceRayEXT(accelerationStructureEXT(_20._m0[subgroupBroadcastFirst(_138)]), 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 2);
    uint _154 = descriptor_qa_check((registers._m0 + 100u) + uint(int(_27._m0.w)), 320u, 3u);
    _26._m0 = _27._m0;
    traceRayEXT(accelerationStructureEXT(_20._m0[_154]), 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 1);
    uint _168 = descriptor_qa_check((SBT._m7.x >> 6u) + 210u, 320u, 4u);
    _25._m0 = _26._m0;
    traceRayEXT(accelerationStructureEXT(_20._m0[subgroupBroadcastFirst(_168)]), 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 0);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.4
; Generator: Unknown(30017); 21022
; Bound: 178
; Schema: 0
OpCapability Shader
OpCapability UniformBufferArrayDynamicIndexing
OpCapability SampledImageArrayDynamicIndexing
OpCapability StorageBufferArrayDynamicIndexing
OpCapability StorageImageArrayDynamicIndexing
OpCapability GroupNonUniformBallot
OpCapability RayTracingKHR
OpCapability RuntimeDescriptorArray
OpCapability UniformBufferArrayNonUniformIndexing
OpCapability SampledImageArrayNonUniformIndexing
OpCapability StorageBufferArrayNonUniformIndexing
OpCapability StorageImageArrayNonUniformIndexing
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
OpExtension "SPV_KHR_ray_tracing"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint RayGenerationKHR %3 "main" %8 %16 %20 %25 %26 %27 %28 %39 %79
OpName %3 "main"
OpName %6 "RootConstants"
OpName %8 "registers"
OpName %14 "SBTBlock"
OpName %16 "SBT"
OpName %18 "RTASHeap"
OpName %23 ""
OpName %37 "DescriptorHeapGlobalQAData"
OpMemberName %37 0 "failed_shader_hash"
OpMemberName %37 1 "failed_offset"
OpMemberName %37 2 "failed_heap"
OpMemberName %37 3 "failed_cookie"
OpMemberName %37 4 "fault_atomic"
OpMemberName %37 5 "failed_instruction"
OpMemberName %37 6 "failed_descriptor_type_mask"
OpMemberName %37 7 "actual_descriptor_type_mask"
OpMemberName %37 8 "fault_type"
OpMemberName %37 9 "live_status_table"
OpName %39 "QAGlobalData"
OpName %48 "descriptor_qa_report_fault"
OpName %41 "fault_type"
OpName %42 "heap_offset"
OpName %43 "cookie"
OpName %44 "heap_index"
OpName %45 "descriptor_type"
OpName %46 "actual_descriptor_type"
OpName %47 "instruction"
OpName %77 "DescriptorHeapQAData"
OpMemberName %77 0 "descriptor_count"
OpMemberName %77 1 "heap_index"
OpMemberName %77 2 "cookies_descriptor_info"
OpName %79 "QAHeapData"
OpName %84 "descriptor_qa_check"
OpName %81 "heap_offset"
OpName %82 "descriptor_type_mask"
OpName %83 "instruction"
OpDecorate %6 Block
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 4
OpMemberDecorate %6 2 Offset 8
OpMemberDecorate %6 3 Offset 12
OpMemberDecorate %6 4 Offset 16
OpMemberDecorate %6 5 Offset 20
OpMemberDecorate %6 6 Offset 24
OpMemberDecorate %6 7 Offset 28
OpDecorate %10 ArrayStride 4
OpDecorate %12 ArrayStride 4
OpDecorate %14 Block
OpMemberDecorate %14 0 Offset 0
OpMemberDecorate %14 1 Offset 20
OpMemberDecorate %14 2 Offset 48
OpMemberDecorate %14 3 Offset 56
OpMemberDecorate %14 4 Offset 64
OpMemberDecorate %14 5 Offset 72
OpMemberDecorate %14 6 Offset 80
OpMemberDecorate %14 7 Offset 88
OpMemberDecorate %14 8 Offset 96
OpMemberDecorate %14 9 Offset 104
OpMemberDecorate %14 10 Offset 112
OpDecorate %17 ArrayStride 8
OpMemberDecorate %18 0 Offset 0
OpDecorate %18 Block
OpDecorate %20 DescriptorSet 0
OpDecorate %20 Binding 0
OpDecorate %20 NonWritable
OpDecorate %20 Restrict
OpDecorate %36 ArrayStride 4
OpMemberDecorate %37 0 Offset 0
OpMemberDecorate %37 1 Offset 8
OpMemberDecorate %37 2 Offset 12
OpMemberDecorate %37 3 Offset 16
OpMemberDecorate %37 4 Offset 20
OpMemberDecorate %37 5 Offset 24
OpMemberDecorate %37 6 Offset 28
OpMemberDecorate %37 7 Offset 32
OpMemberDecorate %37 8 Offset 36
OpMemberDecorate %37 9 Offset 40
OpDecorate %37 Block
OpDecorate %39 DescriptorSet 10
OpDecorate %39 Binding 10
OpDecorate %76 ArrayStride 8
OpMemberDecorate %77 0 Offset 0
OpMemberDecorate %77 1 Offset 4
OpMemberDecorate %77 2 Offset 8
OpDecorate %77 Block
OpDecorate %79 DescriptorSet 10
OpDecorate %79 Binding 11
OpDecorate %79 NonWritable
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeStruct %5 %5 %5 %5 %5 %5 %5 %5
%7 = OpTypePointer PushConstant %6
%8 = OpVariable %7 PushConstant
%9 = OpConstant %5 5
%10 = OpTypeArray %5 %9
%11 = OpConstant %5 6
%12 = OpTypeArray %5 %11
%13 = OpTypeVector %5 2
%14 = OpTypeStruct %10 %12 %13 %13 %13 %13 %13 %13 %13 %13 %13
%15 = OpTypePointer ShaderRecordBufferKHR %14
%16 = OpVariable %15 ShaderRecordBufferKHR
%17 = OpTypeRuntimeArray %13
%18 = OpTypeStruct %17
%19 = OpTypePointer StorageBuffer %18
%20 = OpVariable %19 StorageBuffer
%21 = OpTypeFloat 32
%22 = OpTypeVector %21 4
%23 = OpTypeStruct %22
%24 = OpTypePointer RayPayloadKHR %23
%25 = OpVariable %24 RayPayloadKHR
%26 = OpVariable %24 RayPayloadKHR
%27 = OpVariable %24 RayPayloadKHR
%28 = OpVariable %24 RayPayloadKHR
%29 = OpTypePointer PushConstant %5
%31 = OpConstant %5 0
%34 = OpConstant %5 110
%36 = OpTypeRuntimeArray %5
%37 = OpTypeStruct %13 %5 %5 %5 %5 %5 %5 %5 %5 %36
%38 = OpTypePointer StorageBuffer %37
%39 = OpVariable %38 StorageBuffer
%40 = OpTypeFunction %1 %5 %5 %5 %5 %5 %5 %5
%50 = OpTypePointer StorageBuffer %5
%52 = OpConstant %5 4
%54 = OpConstant %5 1
%55 = OpTypeBool
%60 = OpConstant %5 3
%63 = OpConstant %5 2
%66 = OpConstant %5 7
%68 = OpConstant %5 3735928559
%69 = OpConstantComposite %13 %68 %31
%70 = OpTypePointer StorageBuffer %13
%72 = OpConstant %5 72
%74 = OpConstant %5 8
%76 = OpTypeRuntimeArray %13
%77 = OpTypeStruct %5 %5 %76
%78 = OpTypePointer StorageBuffer %77
%79 = OpVariable %78 StorageBuffer
%80 = OpTypeFunction %5 %5 %5 %5
%96 = OpConstant %5 31
%98 = OpConstant %5 9
%117 = OpConstant %5 320
%121 = OpTypeAccelerationStructureKHR
%123 = OpTypePointer RayPayloadKHR %22
%125 = OpConstant %21 1
%126 = OpConstant %21 2
%127 = OpConstant %21 3
%128 = OpConstant %21 4
%129 = OpConstantComposite %22 %125 %126 %127 %128
%130 = OpConstant %21 0
%131 = OpTypeVector %21 3
%152 = OpConstant %5 100
%162 = OpTypePointer ShaderRecordBufferKHR %5
%167 = OpConstant %5 210
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %176
%176 = OpLabel
%30 = OpAccessChain %29 %8 %31
%32 = OpLoad %5 %30
%33 = OpIAdd %5 %32 %34
%35 = OpFunctionCall %5 %84 %33 %117 %54
%118 = OpGroupNonUniformBroadcastFirst %5 %60 %35
%119 = OpAccessChain %70 %20 %31 %118
%120 = OpLoad %13 %119
%122 = OpConvertUToAccelerationStructureKHR %121 %120
%124 = OpInBoundsAccessChain %123 %28 %31
OpStore %124 %129
%132 = OpCompositeConstruct %131 %125 %126 %127
%133 = OpCompositeConstruct %131 %130 %130 %125
OpTraceRayKHR %122 %31 %31 %31 %31 %31 %132 %125 %133 %128 %28
%134 = OpLoad %22 %124
%135 = OpAccessChain %29 %8 %31
%136 = OpLoad %5 %135
%137 = OpIAdd %5 %136 %60
%138 = OpFunctionCall %5 %84 %137 %117 %63
%139 = OpGroupNonUniformBroadcastFirst %5 %60 %138
%140 = OpAccessChain %70 %20 %31 %139
%141 = OpLoad %13 %140
%142 = OpConvertUToAccelerationStructureKHR %121 %141
%143 = OpInBoundsAccessChain %123 %27 %31
OpStore %143 %134
%144 = OpCompositeConstruct %131 %125 %126 %127
%145 = OpCompositeConstruct %131 %130 %130 %125
OpTraceRayKHR %142 %31 %31 %31 %31 %31 %144 %125 %145 %128 %27
%146 = OpLoad %22 %143
%147 = OpCompositeExtract %21 %146 3
%148 = OpConvertFToS %5 %147
%149 = OpAccessChain %29 %8 %31
%150 = OpLoad %5 %149
%151 = OpIAdd %5 %150 %152
%153 = OpIAdd %5 %151 %148
%154 = OpFunctionCall %5 %84 %153 %117 %60
%155 = OpAccessChain %70 %20 %31 %154
%156 = OpLoad %13 %155
%157 = OpConvertUToAccelerationStructureKHR %121 %156
%158 = OpInBoundsAccessChain %123 %26 %31
OpStore %158 %146
%159 = OpCompositeConstruct %131 %125 %126 %127
%160 = OpCompositeConstruct %131 %130 %130 %125
OpTraceRayKHR %157 %31 %31 %31 %31 %31 %159 %125 %160 %128 %26
%161 = OpLoad %22 %158
%163 = OpAccessChain %162 %16 %66 %31
%164 = OpLoad %5 %163
%165 = OpShiftRightLogical %5 %164 %11
%166 = OpIAdd %5 %165 %167
%168 = OpFunctionCall %5 %84 %166 %117 %52
%169 = OpGroupNonUniformBroadcastFirst %5 %60 %168
%170 = OpAccessChain %70 %20 %31 %169
%171 = OpLoad %13 %170
%172 = OpConvertUToAccelerationStructureKHR %121 %171
%173 = OpInBoundsAccessChain %123 %25 %31
OpStore %173 %161
%174 = OpCompositeConstruct %131 %125 %126 %127
%175 = OpCompositeConstruct %131 %130 %130 %125
OpTraceRayKHR %172 %31 %31 %31 %31 %31 %174 %125 %175 %128 %25
OpReturn
OpFunctionEnd
%48 = OpFunction %1 None %40
%41 = OpFunctionParameter %5
%42 = OpFunctionParameter %5
%43 = OpFunctionParameter %5
%44 = OpFunctionParameter %5
%45 = OpFunctionParameter %5
%46 = OpFunctionParameter %5
%47 = OpFunctionParameter %5
%49 = OpLabel
%51 = OpAccessChain %50 %39 %52
%53 = OpAtomicIAdd %5 %51 %54 %31 %54
%56 = OpIEqual %55 %53 %31
OpSelectionMerge %58 None
OpBranchConditional %56 %57 %58
%57 = OpLabel
%59 = OpAccessChain %50 %39 %60
OpStore %59 %43
%61 = OpAccessChain %50 %39 %54
OpStore %61 %42
%62 = OpAccessChain %50 %39 %63
OpStore %62 %44
%64 = OpAccessChain %50 %39 %11
OpStore %64 %45
%65 = OpAccessChain %50 %39 %66
OpStore %65 %46
%67 = OpAccessChain %50 %39 %9
OpStore %67 %47
%71 = OpAccessChain %70 %39 %31
OpStore %71 %69
OpMemoryBarrier %54 %72
%73 = OpAccessChain %50 %39 %74
OpStore %73 %41
OpBranch %58
%58 = OpLabel
OpReturn
OpFunctionEnd
%84 = OpFunction %5 None %80
%81 = OpFunctionParameter %5
%82 = OpFunctionParameter %5
%83 = OpFunctionParameter %5
%85 = OpLabel
%86 = OpAccessChain %50 %79 %31
%87 = OpLoad %5 %86
%88 = OpAccessChain %50 %79 %54
%89 = OpLoad %5 %88
%90 = OpAccessChain %70 %79 %63 %81
%91 = OpLoad %13 %90
%92 = OpCompositeExtract %5 %91 0
%94 = OpShiftRightLogical %5 %92 %9
%95 = OpBitwiseAnd %5 %92 %96
%93 = OpCompositeExtract %5 %91 1
%97 = OpAccessChain %50 %39 %98 %94
%99 = OpLoad %5 %97
%100 = OpShiftLeftLogical %5 %54 %95
%101 = OpBitwiseAnd %5 %99 %100
%102 = OpINotEqual %55 %101 %31
%103 = OpBitwiseAnd %5 %93 %82
%104 = OpIEqual %55 %103 %82
%105 = OpUGreaterThanEqual %55 %81 %87
%106 = OpSelect %5 %105 %54 %31
%107 = OpSelect %5 %104 %31 %63
%108 = OpSelect %5 %102 %31 %52
%109 = OpBitwiseOr %5 %106 %107
%110 = OpBitwiseOr %5 %109 %108
%111 = OpINotEqual %55 %110 %31
OpSelectionMerge %113 None
OpBranchConditional %111 %112 %113
%112 = OpLabel
%114 = OpFunctionCall %1 %48 %110 %81 %92 %89 %82 %93 %83
OpReturnValue %87
%113 = OpLabel
OpReturnValue %81
OpFunctionEnd
#endif
