#version 460
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_KHR_memory_scope_semantics : require
#extension GL_EXT_spirv_intrinsics : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) writeonly buffer SSBO
{
    uvec2 _m0[];
} _17;

spirv_instruction(set = "GLSL.std.450", id = 81) float16_t spvNClamp(float16_t, float16_t, float16_t);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec2 spvNClamp(f16vec2, f16vec2, f16vec2);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec3 spvNClamp(f16vec3, f16vec3, f16vec3);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec4 spvNClamp(f16vec4, f16vec4, f16vec4);

coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> CoopMatFP16toFP8(coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _40)
{
    uint _48;
    _48 = 0u;
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> coop_output;
    for (;;)
    {
        uint _49 = _48 + 1u;
        int16_t _58 = float16BitsToInt16(spvNClamp(_40[_48], float16_t(-448.0), float16_t(448.0)));
        int16_t _66 = (_58 << int16_t(1us)) - 16384s;
        int16_t _70 = (_66 >> 11s) - 1s;
        int16_t _82 = (_66 & ((_70 & (-2048s)) ^ (-1s))) | (_70 & 2048s);
        i8vec2 _89 = unpack8(_82 >> max((-_70), 0s));
        int8_t _92 = _89.y;
        coop_output[_48] = ((uint8_t(_92) + ((uint8_t((_92 & int8_t(1)) | (_89.x | int8_t(_82 & 127s))) > uint8_t(128)) ? uint8_t(1) : uint8_t(0))) & uint8_t(127)) | (unpack8(_58).y & uint8_t(128));
        if (_49 < uint(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA>(0).length()))
        {
            _48 = _49;
        }
        else
        {
            break;
        }
    }
    return coop_output;
}

void main()
{
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _109 = coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA>(uint16BitsToFloat16(uint16_t(gl_WorkGroupID.x)));
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _110 = CoopMatFP16toFP8(_109);
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _111 = coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA>(uint16BitsToFloat16(uint16_t(gl_WorkGroupID.x | 32768u)));
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _112 = CoopMatFP16toFP8(_111);
    if (gl_LocalInvocationIndex == 0u)
    {
        _17._m0[gl_WorkGroupID.x] = uvec2(pack32(u8vec4(_110[0], _110[1], _110[2], _110[3])), pack32(u8vec4(_112[0], _112[1], _112[2], _112[3])));
    }
}


#if 0
// SPIR-V disassembly
// WaveSize(32)
; SPIR-V
; Version: 1.6
; Generator: Unknown(30017); 21022
; Bound: 135
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability Int8
OpCapability DenormPreserve
OpCapability VulkanMemoryModel
OpCapability CooperativeMatrixKHR
OpExtension "SPV_KHR_cooperative_matrix"
OpExtension "SPV_KHR_float_controls"
%54 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical Vulkan
OpEntryPoint GLCompute %11 "main" %17 %19 %23
OpExecutionMode %11 LocalSize 32 1 1
OpExecutionMode %11 DenormPreserve 16
OpName %11 "main"
OpName %15 "SSBO"
OpName %41 "CoopMatFP16toFP8"
OpName %44 "coop_output"
OpDecorate %14 ArrayStride 8
OpMemberDecorate %15 0 Offset 0
OpDecorate %15 Block
OpDecorate %17 DescriptorSet 0
OpDecorate %17 Binding 0
OpDecorate %17 NonReadable
OpDecorate %19 BuiltIn LocalInvocationIndex
OpDecorate %23 BuiltIn WorkgroupId
%1 = OpTypeFloat 16
%2 = OpTypeInt 32 0
%3 = OpConstant %2 0
%4 = OpConstant %2 16
%6 = OpConstant %2 3
%5 = OpTypeCooperativeMatrixKHR %1 %6 %4 %4 %3
%7 = OpTypeInt 8 0
%8 = OpTypeCooperativeMatrixKHR %7 %6 %4 %4 %3
%9 = OpTypeVoid
%10 = OpTypeFunction %9
%13 = OpTypeVector %2 2
%14 = OpTypeRuntimeArray %13
%15 = OpTypeStruct %14
%16 = OpTypePointer StorageBuffer %15
%17 = OpVariable %16 StorageBuffer
%18 = OpTypePointer Input %2
%19 = OpVariable %18 Input
%21 = OpTypeVector %2 3
%22 = OpTypePointer Input %21
%23 = OpVariable %22 Input
%27 = OpTypeInt 16 0
%32 = OpConstant %2 32768
%36 = OpTypeBool
%37 = OpTypeInt 16 1
%38 = OpTypePointer Function %5
%39 = OpTypeFunction %8 %38
%43 = OpTypePointer Function %8
%50 = OpConstant %2 1
%51 = OpTypePointer Function %1
%56 = OpConstant %1 -0x1.cp+8
%57 = OpConstant %1 0x1.cp+8
%59 = OpTypeVector %7 2
%63 = OpConstant %7 128
%65 = OpConstant %27 1
%67 = OpConstant %37 16384
%69 = OpConstant %37 11
%71 = OpConstant %37 1
%74 = OpConstant %37 0
%76 = OpConstant %37 2048
%78 = OpConstant %37 -2048
%80 = OpConstant %37 -1
%84 = OpConstant %37 127
%85 = OpTypeInt 8 1
%88 = OpTypeVector %85 2
%94 = OpConstant %85 1
%98 = OpConstant %7 1
%99 = OpConstant %7 0
%102 = OpConstant %7 127
%104 = OpTypePointer Function %7
%117 = OpTypeVector %7 4
%129 = OpTypePointer StorageBuffer %13
%11 = OpFunction %9 None %10
%12 = OpLabel
%109 = OpVariable %38 Function
%111 = OpVariable %38 Function
OpBranch %131
%131 = OpLabel
%20 = OpLoad %2 %19
%24 = OpAccessChain %18 %23 %3
%25 = OpLoad %2 %24
%28 = OpUConvert %27 %25
%29 = OpBitcast %1 %28
%30 = OpCompositeConstruct %5 %29
%31 = OpBitwiseOr %2 %25 %32
%33 = OpUConvert %27 %31
%34 = OpBitcast %1 %33
%35 = OpCompositeConstruct %5 %34
OpStore %109 %30
%110 = OpFunctionCall %8 %41 %109
OpStore %111 %35
%112 = OpFunctionCall %8 %41 %111
%113 = OpCompositeExtract %7 %110 0
%114 = OpCompositeExtract %7 %110 1
%115 = OpCompositeExtract %7 %110 2
%116 = OpCompositeExtract %7 %110 3
%118 = OpCompositeConstruct %117 %113 %114 %115 %116
%119 = OpBitcast %2 %118
%120 = OpCompositeExtract %7 %112 0
%121 = OpCompositeExtract %7 %112 1
%122 = OpCompositeExtract %7 %112 2
%123 = OpCompositeExtract %7 %112 3
%124 = OpCompositeConstruct %117 %120 %121 %122 %123
%125 = OpBitcast %2 %124
%126 = OpIEqual %36 %20 %3
OpSelectionMerge %133 None
OpBranchConditional %126 %132 %133
%132 = OpLabel
%127 = OpShiftLeftLogical %2 %25 %6
%128 = OpCompositeConstruct %13 %119 %125
%130 = OpAccessChain %129 %17 %3 %25
OpStore %130 %128 NonPrivatePointer
OpBranch %133
%133 = OpLabel
OpReturn
OpFunctionEnd
%41 = OpFunction %8 None %39
%40 = OpFunctionParameter %38
%42 = OpLabel
%44 = OpVariable %43 Function
%45 = OpCooperativeMatrixLengthKHR %2 %8
OpBranch %46
%46 = OpLabel
%48 = OpPhi %2 %3 %42 %49 %46
%49 = OpIAdd %2 %48 %50
%52 = OpInBoundsAccessChain %51 %40 %48
%53 = OpLoad %1 %52
%55 = OpExtInst %1 %54 NClamp %53 %56 %57
%58 = OpBitcast %37 %55
%60 = OpBitcast %59 %58
%61 = OpCompositeExtract %7 %60 1
%62 = OpBitwiseAnd %7 %61 %63
%64 = OpShiftLeftLogical %37 %58 %65
%66 = OpISub %37 %64 %67
%68 = OpShiftRightArithmetic %37 %66 %69
%70 = OpISub %37 %68 %71
%72 = OpSNegate %37 %70
%73 = OpExtInst %37 %54 SMax %72 %74
%75 = OpBitwiseAnd %37 %70 %76
%77 = OpBitwiseAnd %37 %70 %78
%79 = OpBitwiseXor %37 %77 %80
%81 = OpBitwiseAnd %37 %66 %79
%82 = OpBitwiseOr %37 %81 %75
%83 = OpBitwiseAnd %37 %82 %84
%86 = OpSConvert %85 %83
%87 = OpShiftRightArithmetic %37 %82 %73
%89 = OpBitcast %88 %87
%90 = OpCompositeExtract %85 %89 0
%91 = OpBitwiseOr %85 %90 %86
%92 = OpCompositeExtract %85 %89 1
%93 = OpBitwiseAnd %85 %92 %94
%95 = OpBitwiseOr %85 %93 %91
%96 = OpUGreaterThan %36 %95 %63
%97 = OpSelect %7 %96 %98 %99
%100 = OpIAdd %7 %92 %97
%101 = OpBitwiseAnd %7 %100 %102
%103 = OpBitwiseOr %7 %101 %62
%105 = OpInBoundsAccessChain %104 %44 %48
OpStore %105 %103
%106 = OpULessThan %36 %49 %45
OpLoopMerge %47 %46 None
OpBranchConditional %106 %46 %47
%47 = OpLabel
%107 = OpLoad %8 %44
OpReturnValue %107
OpFunctionEnd
#endif
