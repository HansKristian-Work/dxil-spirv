#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_KHR_memory_scope_semantics : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer SSBO
{
    uint8_t _m0[];
} _14;

layout(set = 0, binding = 0, std430) writeonly buffer _16_18
{
    uint8_t _m0[];
} _18;

layout(set = 0, binding = 0, std430) writeonly buffer _20_22
{
    uint _m0[];
} _22;

void main()
{
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _29;
    coopMatLoad(_29, _14._m0, 0u, 16u, gl_CooperativeMatrixLayoutRowMajor);
    uint _31 = uint(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA>(0).length()) / 4u;
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _35;
    if (_31 == 0u)
    {
        _35 = _29;
    }
    else
    {
        coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _38;
        uint _39;
        _38 = _29;
        _39 = 0u;
        coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _88;
        coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _42;
        coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _73;
        for (;;)
        {
            _42 = _38;
            uint _43 = _39 * 4u;
            uint _61 = pack32(u8vec4(_42[_43 + 0u], _42[_43 + 1u], _42[_43 + 2u], _42[_43 + 3u]));
            uint _63 = _39 + (_31 * gl_LocalInvocationIndex);
            _22._m0[_63 + 64u] = _61;
            _73 = _38;
            u8vec4 _74 = unpack8(_61 ^ 16711935u);
            uint _75 = _39 * 4u;
            _73[_75 + 0u] = _74.x;
            _73[_75 + 1u] = _74.y;
            _73[_75 + 2u] = _74.z;
            _73[_75 + 3u] = _74.w;
            _88 = _73;
            uint _40 = _39 + 1u;
            if (_40 == _31)
            {
                break;
            }
            else
            {
                _38 = _88;
                _39 = _40;
            }
        }
        _35 = _88;
    }
    coopMatStore(_35, _18._m0, 0u, 16u, gl_CooperativeMatrixLayoutRowMajor);
}


#if 0
// SPIR-V disassembly
// WaveSize(32)
; SPIR-V
; Version: 1.6
; Generator: Unknown(30017); 21022
; Bound: 96
; Schema: 0
OpCapability Shader
OpCapability Int8
OpCapability StorageBuffer8BitAccess
OpCapability VulkanMemoryModel
OpCapability CooperativeMatrixKHR
OpExtension "SPV_KHR_8bit_storage"
OpExtension "SPV_KHR_cooperative_matrix"
OpMemoryModel Logical Vulkan
OpEntryPoint GLCompute %9 "main" %14 %18 %22 %24
OpExecutionMode %9 LocalSize 32 1 1
OpName %9 "main"
OpName %12 "SSBO"
OpName %16 "SSBO"
OpName %20 "SSBO"
OpDecorate %11 ArrayStride 1
OpMemberDecorate %12 0 Offset 0
OpDecorate %12 Block
OpDecorate %14 DescriptorSet 0
OpDecorate %14 Binding 0
OpDecorate %14 NonWritable
OpDecorate %14 Restrict
OpDecorate %15 ArrayStride 1
OpMemberDecorate %16 0 Offset 0
OpDecorate %16 Block
OpDecorate %19 ArrayStride 4
OpMemberDecorate %20 0 Offset 0
OpDecorate %20 Block
OpDecorate %18 DescriptorSet 0
OpDecorate %18 Binding 0
OpDecorate %18 NonReadable
OpDecorate %18 Aliased
OpDecorate %22 DescriptorSet 0
OpDecorate %22 Binding 0
OpDecorate %22 NonReadable
OpDecorate %22 Aliased
OpDecorate %24 BuiltIn LocalInvocationIndex
%1 = OpTypeInt 8 0
%2 = OpTypeInt 32 0
%3 = OpConstant %2 0
%4 = OpConstant %2 16
%6 = OpConstant %2 3
%5 = OpTypeCooperativeMatrixKHR %1 %6 %4 %4 %3
%7 = OpTypeVoid
%8 = OpTypeFunction %7
%11 = OpTypeRuntimeArray %1
%12 = OpTypeStruct %11
%13 = OpTypePointer StorageBuffer %12
%14 = OpVariable %13 StorageBuffer
%15 = OpTypeRuntimeArray %1
%16 = OpTypeStruct %15
%17 = OpTypePointer StorageBuffer %16
%18 = OpVariable %17 StorageBuffer
%19 = OpTypeRuntimeArray %2
%20 = OpTypeStruct %19
%21 = OpTypePointer StorageBuffer %20
%22 = OpVariable %21 StorageBuffer
%23 = OpTypePointer Input %2
%24 = OpVariable %23 Input
%27 = OpTypePointer StorageBuffer %1
%32 = OpConstant %2 4
%33 = OpTypeBool
%41 = OpTypePointer Function %5
%45 = OpTypePointer Function %1
%49 = OpConstant %2 1
%53 = OpConstant %2 2
%59 = OpTypeVector %1 4
%66 = OpConstant %2 256
%68 = OpConstant %2 64
%69 = OpTypePointer StorageBuffer %2
%72 = OpConstant %2 16711935
%9 = OpFunction %7 None %8
%10 = OpLabel
%42 = OpVariable %41 Function
%73 = OpVariable %41 Function
OpBranch %90
%90 = OpLabel
%25 = OpLoad %2 %24
%28 = OpAccessChain %27 %14 %3 %3
%29 = OpCooperativeMatrixLoadKHR %5 %28 %3 %4 NonPrivatePointer
%30 = OpCooperativeMatrixLengthKHR %2 %5
%31 = OpUDiv %2 %30 %32
%34 = OpIEqual %33 %31 %3
OpSelectionMerge %94 None
OpBranchConditional %34 %94 %91
%91 = OpLabel
OpBranch %92
%92 = OpLabel
%38 = OpPhi %5 %29 %91 %88 %92
%39 = OpPhi %2 %3 %91 %40 %92
OpStore %42 %38
%43 = OpIMul %2 %39 %32
%44 = OpIAdd %2 %43 %3
%46 = OpInBoundsAccessChain %45 %42 %44
%47 = OpLoad %1 %46
%48 = OpIAdd %2 %43 %49
%50 = OpInBoundsAccessChain %45 %42 %48
%51 = OpLoad %1 %50
%52 = OpIAdd %2 %43 %53
%54 = OpInBoundsAccessChain %45 %42 %52
%55 = OpLoad %1 %54
%56 = OpIAdd %2 %43 %6
%57 = OpInBoundsAccessChain %45 %42 %56
%58 = OpLoad %1 %57
%60 = OpCompositeConstruct %59 %47 %51 %55 %58
%61 = OpBitcast %2 %60
%62 = OpIMul %2 %31 %25
%63 = OpIAdd %2 %39 %62
%64 = OpShiftLeftLogical %2 %63 %53
%65 = OpIAdd %2 %64 %66
%67 = OpIAdd %2 %63 %68
%70 = OpAccessChain %69 %22 %3 %67
OpStore %70 %61 NonPrivatePointer
%71 = OpBitwiseXor %2 %61 %72
OpStore %73 %38
%74 = OpBitcast %59 %71
%75 = OpIMul %2 %39 %32
%76 = OpCompositeExtract %1 %74 0
%77 = OpIAdd %2 %75 %3
%78 = OpInBoundsAccessChain %45 %73 %77
OpStore %78 %76
%79 = OpCompositeExtract %1 %74 1
%80 = OpIAdd %2 %75 %49
%81 = OpInBoundsAccessChain %45 %73 %80
OpStore %81 %79
%82 = OpCompositeExtract %1 %74 2
%83 = OpIAdd %2 %75 %53
%84 = OpInBoundsAccessChain %45 %73 %83
OpStore %84 %82
%85 = OpCompositeExtract %1 %74 3
%86 = OpIAdd %2 %75 %6
%87 = OpInBoundsAccessChain %45 %73 %86
OpStore %87 %85
%88 = OpLoad %5 %73
%40 = OpIAdd %2 %39 %49
%89 = OpIEqual %33 %40 %31
OpLoopMerge %93 %92 None
OpBranchConditional %89 %93 %92
%93 = OpLabel
OpBranch %94
%94 = OpLabel
%35 = OpPhi %5 %29 %90 %88 %93
%37 = OpAccessChain %27 %18 %3 %3
OpCooperativeMatrixStoreKHR %37 %35 %3 %4 NonPrivatePointer
OpReturn
OpFunctionEnd
#endif
