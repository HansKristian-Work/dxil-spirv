#version 460
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_KHR_memory_scope_semantics : require
#extension GL_EXT_spirv_intrinsics : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer SSBO
{
    uint8_t _m0[];
} _21;

layout(set = 0, binding = 0, std430) writeonly buffer _23_25
{
    uint8_t _m0[];
} _25;

spirv_instruction(set = "GLSL.std.450", id = 81) float16_t spvNClamp(float16_t, float16_t, float16_t);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec2 spvNClamp(f16vec2, f16vec2, f16vec2);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec3 spvNClamp(f16vec3, f16vec3, f16vec3);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec4 spvNClamp(f16vec4, f16vec4, f16vec4);

coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> CoopMatFP16toFP8(coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _45)
{
    uint _53;
    _53 = 0u;
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> coop_output;
    for (;;)
    {
        uint _54 = _53 + 1u;
        int16_t _62 = float16BitsToInt16(spvNClamp(_45[_53], float16_t(-448.0), float16_t(448.0)));
        int16_t _71 = (_62 << int16_t(1us)) - 16384s;
        int16_t _75 = (_71 >> 11s) - 1s;
        int16_t _87 = (_71 & ((_75 & (-2048s)) ^ (-1s))) | (_75 & 2048s);
        i8vec2 _94 = unpack8(_87 >> max((-_75), 0s));
        int8_t _97 = _94.y;
        coop_output[_53] = ((uint8_t(_97) + ((uint8_t((_97 & int8_t(1)) | (_94.x | int8_t(_87 & 127s))) > uint8_t(128)) ? uint8_t(1) : uint8_t(0))) & uint8_t(127)) | (unpack8(_62).y & uint8_t(128));
        if (_54 < uint(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(0).length()))
        {
            _53 = _54;
        }
        else
        {
            break;
        }
    }
    return coop_output;
}

void main()
{
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _30;
    coopMatLoad(_30, _21._m0, 0u, 32u, gl_CooperativeMatrixLayoutRowMajor);
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _33;
    coopMatLoad(_33, _21._m0, 512u, 32u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<float, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _37;
    coopMatLoad(_37, _21._m0, 1024u, 64u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _114 = coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(coopMatMulAdd(_30, _33, _37, 0));
    coopMatStore(CoopMatFP16toFP8(_114), _25._m0, 0u, 16u, gl_CooperativeMatrixLayoutColumnMajor);
}


#if 0
// SPIR-V disassembly
// WaveSize(32)
; SPIR-V
; Version: 1.6
; Generator: Unknown(30017); 21022
; Bound: 119
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability Int8
OpCapability StorageBuffer8BitAccess
OpCapability DenormPreserve
OpCapability VulkanMemoryModel
OpCapability CooperativeMatrixKHR
OpExtension "SPV_KHR_8bit_storage"
OpExtension "SPV_KHR_cooperative_matrix"
OpExtension "SPV_KHR_float_controls"
%58 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical Vulkan
OpEntryPoint GLCompute %16 "main" %21 %25
OpExecutionMode %16 LocalSize 32 1 1
OpExecutionMode %16 DenormPreserve 16
OpName %16 "main"
OpName %19 "SSBO"
OpName %23 "SSBO"
OpName %46 "CoopMatFP16toFP8"
OpName %49 "coop_output"
OpDecorate %18 ArrayStride 1
OpMemberDecorate %19 0 Offset 0
OpDecorate %19 Block
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 0
OpDecorate %21 NonWritable
OpDecorate %21 Restrict
OpDecorate %22 ArrayStride 1
OpMemberDecorate %23 0 Offset 0
OpDecorate %23 Block
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 0
OpDecorate %25 NonReadable
%1 = OpTypeFloat 16
%2 = OpTypeInt 32 0
%3 = OpConstant %2 0
%4 = OpConstant %2 16
%6 = OpConstant %2 3
%5 = OpTypeCooperativeMatrixKHR %1 %6 %4 %4 %3
%7 = OpConstant %2 1
%8 = OpTypeCooperativeMatrixKHR %1 %6 %4 %4 %7
%9 = OpTypeFloat 32
%10 = OpConstant %2 2
%11 = OpTypeCooperativeMatrixKHR %9 %6 %4 %4 %10
%12 = OpTypeInt 8 0
%13 = OpTypeCooperativeMatrixKHR %12 %6 %4 %4 %10
%14 = OpTypeVoid
%15 = OpTypeFunction %14
%18 = OpTypeRuntimeArray %12
%19 = OpTypeStruct %18
%20 = OpTypePointer StorageBuffer %19
%21 = OpVariable %20 StorageBuffer
%22 = OpTypeRuntimeArray %12
%23 = OpTypeStruct %22
%24 = OpTypePointer StorageBuffer %23
%25 = OpVariable %24 StorageBuffer
%27 = OpTypePointer StorageBuffer %12
%29 = OpConstant %2 32
%32 = OpConstant %2 512
%35 = OpConstant %2 1024
%36 = OpConstant %2 64
%39 = OpTypeCooperativeMatrixKHR %1 %6 %4 %4 %10
%41 = OpTypeBool
%42 = OpTypeInt 16 1
%43 = OpTypePointer Function %39
%44 = OpTypeFunction %13 %43
%48 = OpTypePointer Function %13
%55 = OpTypePointer Function %1
%60 = OpConstant %1 -0x1.cp+8
%61 = OpConstant %1 0x1.cp+8
%63 = OpTypeVector %12 2
%67 = OpConstant %12 128
%69 = OpTypeInt 16 0
%70 = OpConstant %69 1
%72 = OpConstant %42 16384
%74 = OpConstant %42 11
%76 = OpConstant %42 1
%79 = OpConstant %42 0
%81 = OpConstant %42 2048
%83 = OpConstant %42 -2048
%85 = OpConstant %42 -1
%89 = OpConstant %42 127
%90 = OpTypeInt 8 1
%93 = OpTypeVector %90 2
%99 = OpConstant %90 1
%103 = OpConstant %12 1
%104 = OpConstant %12 0
%107 = OpConstant %12 127
%109 = OpTypePointer Function %12
%16 = OpFunction %14 None %15
%17 = OpLabel
%114 = OpVariable %43 Function
OpBranch %117
%117 = OpLabel
%28 = OpAccessChain %27 %21 %3 %3
%30 = OpCooperativeMatrixLoadKHR %5 %28 %3 %29 NonPrivatePointer
%31 = OpAccessChain %27 %21 %3 %32
%33 = OpCooperativeMatrixLoadKHR %8 %31 %7 %29 NonPrivatePointer
%34 = OpAccessChain %27 %21 %3 %35
%37 = OpCooperativeMatrixLoadKHR %11 %34 %7 %36 NonPrivatePointer
%38 = OpCooperativeMatrixMulAddKHR %11 %30 %33 %37
%40 = OpFConvert %39 %38
OpStore %114 %40
%115 = OpFunctionCall %13 %46 %114
%116 = OpAccessChain %27 %25 %3 %3
OpCooperativeMatrixStoreKHR %116 %115 %7 %4 NonPrivatePointer
OpReturn
OpFunctionEnd
%46 = OpFunction %13 None %44
%45 = OpFunctionParameter %43
%47 = OpLabel
%49 = OpVariable %48 Function
%50 = OpCooperativeMatrixLengthKHR %2 %13
OpBranch %51
%51 = OpLabel
%53 = OpPhi %2 %3 %47 %54 %51
%54 = OpIAdd %2 %53 %7
%56 = OpInBoundsAccessChain %55 %45 %53
%57 = OpLoad %1 %56
%59 = OpExtInst %1 %58 NClamp %57 %60 %61
%62 = OpBitcast %42 %59
%64 = OpBitcast %63 %62
%65 = OpCompositeExtract %12 %64 1
%66 = OpBitwiseAnd %12 %65 %67
%68 = OpShiftLeftLogical %42 %62 %70
%71 = OpISub %42 %68 %72
%73 = OpShiftRightArithmetic %42 %71 %74
%75 = OpISub %42 %73 %76
%77 = OpSNegate %42 %75
%78 = OpExtInst %42 %58 SMax %77 %79
%80 = OpBitwiseAnd %42 %75 %81
%82 = OpBitwiseAnd %42 %75 %83
%84 = OpBitwiseXor %42 %82 %85
%86 = OpBitwiseAnd %42 %71 %84
%87 = OpBitwiseOr %42 %86 %80
%88 = OpBitwiseAnd %42 %87 %89
%91 = OpSConvert %90 %88
%92 = OpShiftRightArithmetic %42 %87 %78
%94 = OpBitcast %93 %92
%95 = OpCompositeExtract %90 %94 0
%96 = OpBitwiseOr %90 %95 %91
%97 = OpCompositeExtract %90 %94 1
%98 = OpBitwiseAnd %90 %97 %99
%100 = OpBitwiseOr %90 %98 %96
%101 = OpUGreaterThan %41 %100 %67
%102 = OpSelect %12 %101 %103 %104
%105 = OpIAdd %12 %97 %102
%106 = OpBitwiseAnd %12 %105 %107
%108 = OpBitwiseOr %12 %106 %66
%110 = OpInBoundsAccessChain %109 %49 %53
OpStore %110 %108
%111 = OpULessThan %41 %54 %50
OpLoopMerge %52 %51 None
OpBranchConditional %111 %51 %52
%52 = OpLabel
%112 = OpLoad %13 %49
OpReturnValue %112
OpFunctionEnd
#endif
