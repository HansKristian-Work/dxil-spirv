#version 460
#if defined(GL_ARB_gpu_shader_int64)
#extension GL_ARB_gpu_shader_int64 : require
#else
#error No extension available for 64-bit integers.
#endif
#extension GL_EXT_shader_image_int64 : require
#extension GL_EXT_shader_atomic_int64 : require
#extension GL_KHR_shader_subgroup_ballot : require
layout(local_size_x = 8, local_size_y = 8, local_size_z_id = 0) in;


layout(set = 0, binding = 0, std430) buffer SSBO
{
    uint _m0[];
} _11;

layout(set = 0, binding = 0, std430) buffer _14_16
{
    uint64_t _m0[];
} _16;

layout(set = 0, binding = 4, std430) buffer _27_29
{
    uint _m0[];
} _29;

layout(set = 0, binding = 4, std430) buffer _32_34
{
    uvec2 _m0[];
} _34;

layout(set = 0, binding = 1, r64ui) uniform u64image1D _19;
layout(set = 0, binding = 2, r64ui) uniform u64image2D _22;
layout(set = 0, binding = 3, r64ui) uniform u64image3D _25;

void main()
{
    uint64_t _60 = atomicMax(_16._m0[gl_GlobalInvocationID.x], packUint2x32(uvec2(40u, 50u)));
    _34._m0[gl_GlobalInvocationID.x] = uvec2(unpackUint2x32(_60));
    uint64_t _73 = imageAtomicMin(_19, int(gl_GlobalInvocationID.x), packUint2x32(uvec2(60u, 70u)));
    uvec2 _74 = unpackUint2x32(_73);
    _34._m0[gl_GlobalInvocationID.x] = uvec2(_34._m0[gl_GlobalInvocationID.x].x + _74.x, _34._m0[gl_GlobalInvocationID.x].y + _74.y);
    uint64_t _91 = imageAtomicXor(_22, ivec2(uvec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)), packUint2x32(uvec2(80u, 90u)));
    uvec2 _92 = unpackUint2x32(_91);
    _34._m0[gl_GlobalInvocationID.x] = uvec2(_34._m0[gl_GlobalInvocationID.x].x + _92.x, _34._m0[gl_GlobalInvocationID.x].y + _92.y);
    uint64_t _109 = imageAtomicAdd(_25, ivec3(uvec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z)), packUint2x32(uvec2(100u, 110u)));
    uvec2 _110 = unpackUint2x32(_109);
    _34._m0[gl_GlobalInvocationID.x] = uvec2(_34._m0[gl_GlobalInvocationID.x].x + _110.x, _34._m0[gl_GlobalInvocationID.x].y + _110.y);
    uint _121 = gl_GlobalInvocationID.x << 4u;
    _29._m0[gl_GlobalInvocationID.x * 2u] += subgroupBroadcastFirst(_121);
    _29._m0[gl_GlobalInvocationID.x * 2u] = uint(float(_29._m0[gl_GlobalInvocationID.x * 2u]) + uintBitsToFloat(subgroupBroadcastFirst(floatBitsToUint(float(gl_GlobalInvocationID.y << 4u)))));
    _29._m0[(gl_GlobalInvocationID.x * 2u) + 1u] = _34._m0[gl_GlobalInvocationID.x].y + subgroupBroadcast(gl_GlobalInvocationID.z << 4u, 7u);
    _29._m0[(gl_GlobalInvocationID.x * 2u) + 1u] = uint(float(_34._m0[gl_GlobalInvocationID.x].y) + uintBitsToFloat(subgroupBroadcast(floatBitsToUint(float(_121)), 9u)));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.4
; Generator: Unknown(30017); 21022
; Bound: 171
; Schema: 0
OpCapability Shader
OpCapability Int64
OpCapability Int64Atomics
OpCapability Image1D
OpCapability GroupNonUniformBallot
OpCapability Int64ImageEXT
OpExtension "SPV_EXT_shader_image_int64"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %11 %16 %19 %22 %25 %29 %34 %41
OpExecutionModeId %3 LocalSizeId %6 %6 %7
OpName %3 "main"
OpName %9 "SSBO"
OpName %14 "SSBO"
OpName %27 "SSBO"
OpName %32 "SSBO"
OpDecorate %7 SpecId 0
OpDecorate %8 ArrayStride 4
OpMemberDecorate %9 0 Offset 0
OpDecorate %9 Block
OpDecorate %13 ArrayStride 8
OpMemberDecorate %14 0 Offset 0
OpDecorate %14 Block
OpDecorate %11 DescriptorSet 0
OpDecorate %11 Binding 0
OpDecorate %11 Aliased
OpDecorate %16 DescriptorSet 0
OpDecorate %16 Binding 0
OpDecorate %16 Aliased
OpDecorate %19 DescriptorSet 0
OpDecorate %19 Binding 1
OpDecorate %22 DescriptorSet 0
OpDecorate %22 Binding 2
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 3
OpDecorate %26 ArrayStride 4
OpMemberDecorate %27 0 Offset 0
OpDecorate %27 Block
OpDecorate %31 ArrayStride 8
OpMemberDecorate %32 0 Offset 0
OpDecorate %32 Block
OpDecorate %29 DescriptorSet 0
OpDecorate %29 Binding 4
OpDecorate %29 Aliased
OpDecorate %34 DescriptorSet 0
OpDecorate %34 Binding 4
OpDecorate %34 Aliased
OpDecorate %41 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpConstant %5 8
%7 = OpSpecConstant %5 1
%8 = OpTypeRuntimeArray %5
%9 = OpTypeStruct %8
%10 = OpTypePointer StorageBuffer %9
%11 = OpVariable %10 StorageBuffer
%12 = OpTypeInt 64 0
%13 = OpTypeRuntimeArray %12
%14 = OpTypeStruct %13
%15 = OpTypePointer StorageBuffer %14
%16 = OpVariable %15 StorageBuffer
%17 = OpTypeImage %12 1D 0 0 0 2 R64ui
%18 = OpTypePointer UniformConstant %17
%19 = OpVariable %18 UniformConstant
%20 = OpTypeImage %12 2D 0 0 0 2 R64ui
%21 = OpTypePointer UniformConstant %20
%22 = OpVariable %21 UniformConstant
%23 = OpTypeImage %12 3D 0 0 0 2 R64ui
%24 = OpTypePointer UniformConstant %23
%25 = OpVariable %24 UniformConstant
%26 = OpTypeRuntimeArray %5
%27 = OpTypeStruct %26
%28 = OpTypePointer StorageBuffer %27
%29 = OpVariable %28 StorageBuffer
%30 = OpTypeVector %5 2
%31 = OpTypeRuntimeArray %30
%32 = OpTypeStruct %31
%33 = OpTypePointer StorageBuffer %32
%34 = OpVariable %33 StorageBuffer
%39 = OpTypeVector %5 3
%40 = OpTypePointer Input %39
%41 = OpVariable %40 Input
%42 = OpTypePointer Input %5
%44 = OpConstant %5 0
%47 = OpConstant %5 1
%50 = OpConstant %5 2
%53 = OpConstant %5 3
%54 = OpTypePointer StorageBuffer %12
%56 = OpConstant %5 40
%57 = OpConstant %5 50
%65 = OpTypePointer StorageBuffer %30
%67 = OpTypePointer Image %12
%69 = OpConstant %5 60
%70 = OpConstant %5 70
%87 = OpConstant %5 80
%88 = OpConstant %5 90
%105 = OpConstant %5 100
%106 = OpConstant %5 110
%122 = OpConstant %5 4
%125 = OpTypePointer StorageBuffer %5
%132 = OpTypeFloat 32
%147 = OpConstant %5 7
%158 = OpConstant %5 9
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %169
%169 = OpLabel
%36 = OpLoad %23 %25
%37 = OpLoad %20 %22
%38 = OpLoad %17 %19
%43 = OpAccessChain %42 %41 %44
%45 = OpLoad %5 %43
%46 = OpAccessChain %42 %41 %47
%48 = OpLoad %5 %46
%49 = OpAccessChain %42 %41 %50
%51 = OpLoad %5 %49
%52 = OpShiftLeftLogical %5 %45 %53
%55 = OpAccessChain %54 %16 %44 %45
%58 = OpCompositeConstruct %30 %56 %57
%59 = OpBitcast %12 %58
%60 = OpAtomicUMax %12 %55 %47 %44 %59
%61 = OpBitcast %30 %60
%62 = OpCompositeExtract %5 %61 0
%63 = OpCompositeExtract %5 %61 1
%64 = OpCompositeConstruct %30 %62 %63
%66 = OpAccessChain %65 %34 %44 %45
OpStore %66 %64
%68 = OpImageTexelPointer %67 %19 %45 %44
%71 = OpCompositeConstruct %30 %69 %70
%72 = OpBitcast %12 %71
%73 = OpAtomicUMin %12 %68 %47 %44 %72
%74 = OpBitcast %30 %73
%75 = OpCompositeExtract %5 %74 0
%76 = OpCompositeExtract %5 %74 1
%77 = OpAccessChain %65 %34 %44 %45
%78 = OpLoad %30 %77
%79 = OpCompositeExtract %5 %78 0
%80 = OpCompositeExtract %5 %78 1
%81 = OpIAdd %5 %79 %75
%82 = OpIAdd %5 %80 %76
%83 = OpCompositeConstruct %30 %81 %82
%84 = OpAccessChain %65 %34 %44 %45
OpStore %84 %83
%85 = OpCompositeConstruct %30 %45 %48
%86 = OpImageTexelPointer %67 %22 %85 %44
%89 = OpCompositeConstruct %30 %87 %88
%90 = OpBitcast %12 %89
%91 = OpAtomicXor %12 %86 %47 %44 %90
%92 = OpBitcast %30 %91
%93 = OpCompositeExtract %5 %92 0
%94 = OpCompositeExtract %5 %92 1
%95 = OpAccessChain %65 %34 %44 %45
%96 = OpLoad %30 %95
%97 = OpCompositeExtract %5 %96 0
%98 = OpCompositeExtract %5 %96 1
%99 = OpIAdd %5 %97 %93
%100 = OpIAdd %5 %98 %94
%101 = OpCompositeConstruct %30 %99 %100
%102 = OpAccessChain %65 %34 %44 %45
OpStore %102 %101
%103 = OpCompositeConstruct %39 %45 %48 %51
%104 = OpImageTexelPointer %67 %25 %103 %44
%107 = OpCompositeConstruct %30 %105 %106
%108 = OpBitcast %12 %107
%109 = OpAtomicIAdd %12 %104 %47 %44 %108
%110 = OpBitcast %30 %109
%111 = OpCompositeExtract %5 %110 0
%112 = OpCompositeExtract %5 %110 1
%113 = OpAccessChain %65 %34 %44 %45
%114 = OpLoad %30 %113
%115 = OpCompositeExtract %5 %114 0
%116 = OpCompositeExtract %5 %114 1
%117 = OpIAdd %5 %115 %111
%118 = OpIAdd %5 %116 %112
%119 = OpCompositeConstruct %30 %117 %118
%120 = OpAccessChain %65 %34 %44 %45
OpStore %120 %119
%121 = OpShiftLeftLogical %5 %45 %122
%123 = OpGroupNonUniformBroadcastFirst %5 %53 %121
%124 = OpIMul %5 %45 %50
%126 = OpAccessChain %125 %29 %44 %124
%127 = OpLoad %5 %126
%128 = OpIAdd %5 %127 %123
%129 = OpIMul %5 %45 %50
%130 = OpAccessChain %125 %29 %44 %129
OpStore %130 %128
%131 = OpShiftLeftLogical %5 %48 %122
%133 = OpConvertUToF %132 %131
%134 = OpBitcast %5 %133
%135 = OpGroupNonUniformBroadcastFirst %5 %53 %134
%136 = OpBitcast %132 %135
%137 = OpIMul %5 %45 %50
%138 = OpAccessChain %125 %29 %44 %137
%139 = OpLoad %5 %138
%140 = OpConvertUToF %132 %139
%141 = OpFAdd %132 %140 %136
%142 = OpConvertFToU %5 %141
%143 = OpIMul %5 %45 %50
%144 = OpAccessChain %125 %29 %44 %143
OpStore %144 %142
%145 = OpShiftLeftLogical %5 %51 %122
%146 = OpGroupNonUniformBroadcast %5 %53 %145 %147
%148 = OpAccessChain %65 %34 %44 %45
%149 = OpLoad %30 %148
%150 = OpCompositeExtract %5 %149 1
%151 = OpIAdd %5 %150 %146
%152 = OpIMul %5 %45 %50
%153 = OpIAdd %5 %152 %47
%154 = OpAccessChain %125 %29 %44 %153
OpStore %154 %151
%155 = OpConvertUToF %132 %121
%156 = OpBitcast %5 %155
%157 = OpGroupNonUniformBroadcast %5 %53 %156 %158
%159 = OpBitcast %132 %157
%160 = OpAccessChain %65 %34 %44 %45
%161 = OpLoad %30 %160
%162 = OpCompositeExtract %5 %161 1
%163 = OpConvertUToF %132 %162
%164 = OpFAdd %132 %163 %159
%165 = OpConvertFToU %5 %164
%166 = OpIMul %5 %45 %50
%167 = OpIAdd %5 %166 %47
%168 = OpAccessChain %125 %29 %44 %167
OpStore %168 %165
OpReturn
OpFunctionEnd
#endif
