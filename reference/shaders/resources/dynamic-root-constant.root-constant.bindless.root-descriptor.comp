#version 460
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_buffer_reference_uvec2 : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(buffer_reference) buffer PhysicalPointerFloat4Array;

layout(buffer_reference, buffer_reference_align = 16, std430) buffer PhysicalPointerFloat4Array
{
    vec4 value[];
};

layout(push_constant, std430) uniform RootConstants
{
    uvec2 _m0;
    uvec2 _m1;
    uvec2 _m2;
    uvec2 _m3;
    uint root_constants_and_tables[16];
} registers;

layout(set = 4, binding = 0, r32ui) uniform writeonly uimageBuffer _15[];

void main()
{
    uint _22 = registers.root_constants_and_tables[4u] + 2u;
    uint _40 = (gl_WorkGroupID.x << 1u) | 1u;
    PhysicalPointerFloat4Array(registers._m2).value[gl_GlobalInvocationID.x] = vec4(uintBitsToFloat(uvec4(registers.root_constants_and_tables[min((_40 + 0u), 15u)], registers.root_constants_and_tables[min((_40 + 1u), 15u)], registers.root_constants_and_tables[min((_40 + 2u), 15u)], registers.root_constants_and_tables[min((_40 + 3u), 15u)])));
    vec4 _88 = uintBitsToFloat(uvec4(registers.root_constants_and_tables[12u], registers.root_constants_and_tables[13u], registers.root_constants_and_tables[14u], registers.root_constants_and_tables[15u]));
    uint _93 = gl_GlobalInvocationID.x * 4u;
    imageStore(_15[_22], int(_93), uvec4(floatBitsToUint(_88.x)));
    imageStore(_15[_22], int(_93 + 1u), uvec4(floatBitsToUint(_88.y)));
    imageStore(_15[_22], int(_93 + 2u), uvec4(floatBitsToUint(_88.z)));
    imageStore(_15[_22], int(_93 + 3u), uvec4(floatBitsToUint(_88.w)));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 107
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpCapability RuntimeDescriptorArray
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
%43 = OpExtInstImport "GLSL.std.450"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint GLCompute %3 "main" %30 %35
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %9 "RootConstants"
OpMemberName %9 4 "root_constants_and_tables"
OpName %11 "registers"
OpName %70 "PhysicalPointerFloat4Array"
OpMemberName %70 0 "value"
OpDecorate %8 ArrayStride 4
OpDecorate %9 Block
OpMemberDecorate %9 0 Offset 0
OpMemberDecorate %9 1 Offset 8
OpMemberDecorate %9 2 Offset 16
OpMemberDecorate %9 3 Offset 24
OpMemberDecorate %9 4 Offset 32
OpDecorate %15 DescriptorSet 4
OpDecorate %15 Binding 0
OpDecorate %15 NonReadable
OpDecorate %30 BuiltIn GlobalInvocationId
OpDecorate %35 BuiltIn WorkgroupId
OpDecorate %69 ArrayStride 16
OpMemberDecorate %70 0 Offset 0
OpDecorate %70 Block
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeVector %5 2
%7 = OpConstant %5 16
%8 = OpTypeArray %5 %7
%9 = OpTypeStruct %6 %6 %6 %6 %8
%10 = OpTypePointer PushConstant %9
%11 = OpVariable %10 PushConstant
%12 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%13 = OpTypeRuntimeArray %12
%14 = OpTypePointer UniformConstant %13
%15 = OpVariable %14 UniformConstant
%16 = OpTypePointer UniformConstant %12
%18 = OpTypePointer PushConstant %5
%20 = OpConstant %5 4
%23 = OpConstant %5 2
%25 = OpTypePointer PushConstant %6
%28 = OpTypeVector %5 3
%29 = OpTypePointer Input %28
%30 = OpVariable %29 Input
%31 = OpTypePointer Input %5
%33 = OpConstant %5 0
%35 = OpVariable %29 Input
%39 = OpConstant %5 1
%45 = OpConstant %5 15
%57 = OpConstant %5 3
%60 = OpTypeVector %5 4
%62 = OpTypeFloat 32
%63 = OpTypeVector %62 4
%69 = OpTypeRuntimeArray %63
%70 = OpTypeStruct %69
%71 = OpTypePointer PhysicalStorageBuffer %70
%73 = OpTypePointer PhysicalStorageBuffer %63
%77 = OpConstant %5 12
%80 = OpConstant %5 13
%83 = OpConstant %5 14
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %105
%105 = OpLabel
%19 = OpAccessChain %18 %11 %20 %20
%21 = OpLoad %5 %19
%22 = OpIAdd %5 %21 %23
%17 = OpAccessChain %16 %15 %22
%24 = OpLoad %12 %17
%26 = OpAccessChain %25 %11 %23
%27 = OpLoad %6 %26
%32 = OpAccessChain %31 %30 %33
%34 = OpLoad %5 %32
%36 = OpAccessChain %31 %35 %33
%37 = OpLoad %5 %36
%38 = OpShiftLeftLogical %5 %37 %39
%40 = OpBitwiseOr %5 %38 %39
%42 = OpIAdd %5 %40 %33
%44 = OpExtInst %5 %43 UMin %42 %45
%41 = OpAccessChain %18 %11 %20 %44
%46 = OpLoad %5 %41
%48 = OpIAdd %5 %40 %39
%49 = OpExtInst %5 %43 UMin %48 %45
%47 = OpAccessChain %18 %11 %20 %49
%50 = OpLoad %5 %47
%52 = OpIAdd %5 %40 %23
%53 = OpExtInst %5 %43 UMin %52 %45
%51 = OpAccessChain %18 %11 %20 %53
%54 = OpLoad %5 %51
%56 = OpIAdd %5 %40 %57
%58 = OpExtInst %5 %43 UMin %56 %45
%55 = OpAccessChain %18 %11 %20 %58
%59 = OpLoad %5 %55
%61 = OpCompositeConstruct %60 %46 %50 %54 %59
%64 = OpBitcast %63 %61
%65 = OpCompositeExtract %62 %64 0
%66 = OpCompositeExtract %62 %64 1
%67 = OpCompositeExtract %62 %64 2
%68 = OpCompositeExtract %62 %64 3
%72 = OpBitcast %71 %27
%74 = OpInBoundsAccessChain %73 %72 %33 %34
%75 = OpCompositeConstruct %63 %65 %66 %67 %68
OpStore %74 %75 Aligned 16
%76 = OpAccessChain %18 %11 %20 %77
%78 = OpLoad %5 %76
%79 = OpAccessChain %18 %11 %20 %80
%81 = OpLoad %5 %79
%82 = OpAccessChain %18 %11 %20 %83
%84 = OpLoad %5 %82
%85 = OpAccessChain %18 %11 %20 %45
%86 = OpLoad %5 %85
%87 = OpCompositeConstruct %60 %78 %81 %84 %86
%88 = OpBitcast %63 %87
%89 = OpCompositeExtract %62 %88 0
%90 = OpCompositeExtract %62 %88 1
%91 = OpCompositeExtract %62 %88 2
%92 = OpCompositeExtract %62 %88 3
%93 = OpIMul %5 %34 %20
%94 = OpBitcast %5 %89
%95 = OpBitcast %5 %90
%96 = OpBitcast %5 %91
%97 = OpBitcast %5 %92
%98 = OpCompositeConstruct %60 %94 %94 %94 %94
OpImageWrite %24 %93 %98
%99 = OpCompositeConstruct %60 %95 %95 %95 %95
%100 = OpIAdd %5 %93 %39
OpImageWrite %24 %100 %99
%101 = OpCompositeConstruct %60 %96 %96 %96 %96
%102 = OpIAdd %5 %93 %23
OpImageWrite %24 %102 %101
%103 = OpCompositeConstruct %60 %97 %97 %97 %97
%104 = OpIAdd %5 %93 %57
OpImageWrite %24 %104 %103
OpReturn
OpFunctionEnd
#endif
