#version 460
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

shared mediump float _13[64];
shared mediump float _17[256];

void main()
{
    mediump float _31[4];
    _31[0u] = 0.0;
    _31[1u] = 0.0;
    _31[2u] = 0.0;
    _31[3u] = 0.0;
    float _41 = float(gl_LocalInvocationIndex);
    mediump float mp_copy_41 = _41;
    _13[gl_LocalInvocationIndex] = _41;
    _17[0u + (gl_LocalInvocationIndex * 4u)] = mp_copy_41 + 1.0;
    _17[1u + (gl_LocalInvocationIndex * 4u)] = mp_copy_41 + 2.0;
    _17[2u + (gl_LocalInvocationIndex * 4u)] = mp_copy_41 + 3.0;
    _17[3u + (gl_LocalInvocationIndex * 4u)] = mp_copy_41 + 4.0;
    barrier();
    uint _69 = gl_LocalInvocationIndex & 3u;
    if (_69 < 4u)
    {
        _31[_69] = _13[gl_LocalInvocationIndex ^ 5u];
    }
    uint _77 = (gl_LocalInvocationIndex + 1u) & 3u;
    if (_77 < 4u)
    {
        _31[_77] = _13[gl_LocalInvocationIndex ^ 4u];
    }
    uint _80 = gl_LocalInvocationIndex ^ 1u;
    uint _83 = gl_LocalInvocationIndex ^ 3u;
    uint _112 = gl_GlobalInvocationID.x * 4u;
    imageStore(_8, int(_112), uvec4(floatBitsToUint((_17[0u + (_83 * 4u)] + _13[_80]) + _31[0u])));
    imageStore(_8, int(_112 + 1u), uvec4(floatBitsToUint((_17[1u + (_83 * 4u)] + _13[_80]) + _31[1u])));
    imageStore(_8, int(_112 + 2u), uvec4(floatBitsToUint((_17[2u + (_83 * 4u)] + _13[_80]) + _31[2u])));
    imageStore(_8, int(_112 + 3u), uvec4(floatBitsToUint((_17[3u + (_83 * 4u)] + _13[_80]) + _31[3u])));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 131
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %21 %26
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonReadable
OpDecorate %13 RelaxedPrecision
OpDecorate %17 RelaxedPrecision
OpDecorate %21 BuiltIn GlobalInvocationId
OpDecorate %26 BuiltIn LocalInvocationIndex
OpDecorate %31 RelaxedPrecision
OpDecorate %44 RelaxedPrecision
OpDecorate %46 RelaxedPrecision
OpDecorate %48 RelaxedPrecision
OpDecorate %50 RelaxedPrecision
OpDecorate %100 RelaxedPrecision
OpDecorate %101 RelaxedPrecision
OpDecorate %102 RelaxedPrecision
OpDecorate %103 RelaxedPrecision
OpDecorate %108 RelaxedPrecision
OpDecorate %109 RelaxedPrecision
OpDecorate %110 RelaxedPrecision
OpDecorate %111 RelaxedPrecision
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpConstant %5 64
%10 = OpTypeFloat 32
%11 = OpTypeArray %10 %9
%12 = OpTypePointer Workgroup %11
%13 = OpVariable %12 Workgroup
%14 = OpConstant %5 256
%15 = OpTypeArray %10 %14
%16 = OpTypePointer Workgroup %15
%17 = OpVariable %16 Workgroup
%19 = OpTypeVector %5 3
%20 = OpTypePointer Input %19
%21 = OpVariable %20 Input
%22 = OpTypePointer Input %5
%24 = OpConstant %5 0
%26 = OpVariable %22 Input
%28 = OpConstant %5 4
%29 = OpTypeArray %10 %28
%30 = OpTypePointer Function %29
%32 = OpTypePointer Function %10
%35 = OpConstant %5 1
%37 = OpConstant %5 2
%39 = OpConstant %5 3
%40 = OpConstant %10 0
%42 = OpTypePointer Workgroup %10
%45 = OpConstant %10 1
%47 = OpConstant %10 2
%49 = OpConstant %10 3
%51 = OpConstant %10 4
%64 = OpConstant %5 264
%66 = OpConstant %5 5
%71 = OpTypeBool
%117 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
%31 = OpVariable %30 Function
OpBranch %125
%125 = OpLabel
%18 = OpLoad %6 %8
%23 = OpAccessChain %22 %21 %24
%25 = OpLoad %5 %23
%27 = OpLoad %5 %26
%33 = OpInBoundsAccessChain %32 %31 %24
%34 = OpInBoundsAccessChain %32 %31 %35
%36 = OpInBoundsAccessChain %32 %31 %37
%38 = OpInBoundsAccessChain %32 %31 %39
OpStore %33 %40
OpStore %34 %40
OpStore %36 %40
OpStore %38 %40
%41 = OpConvertUToF %10 %27
%43 = OpAccessChain %42 %13 %27
OpStore %43 %41
%44 = OpFAdd %10 %41 %45
%46 = OpFAdd %10 %41 %47
%48 = OpFAdd %10 %41 %49
%50 = OpFAdd %10 %41 %51
%52 = OpIMul %5 %27 %28
%53 = OpIAdd %5 %24 %52
%54 = OpAccessChain %42 %17 %53
OpStore %54 %44
%55 = OpIMul %5 %27 %28
%56 = OpIAdd %5 %35 %55
%57 = OpAccessChain %42 %17 %56
OpStore %57 %46
%58 = OpIMul %5 %27 %28
%59 = OpIAdd %5 %37 %58
%60 = OpAccessChain %42 %17 %59
OpStore %60 %48
%61 = OpIMul %5 %27 %28
%62 = OpIAdd %5 %39 %61
%63 = OpAccessChain %42 %17 %62
OpStore %63 %50
OpControlBarrier %37 %37 %64
%65 = OpBitwiseXor %5 %27 %66
%67 = OpAccessChain %42 %13 %65
%68 = OpLoad %10 %67
%69 = OpBitwiseAnd %5 %27 %39
%72 = OpULessThan %71 %69 %28
%70 = OpAccessChain %32 %31 %69
OpSelectionMerge %127 None
OpBranchConditional %72 %126 %127
%126 = OpLabel
OpStore %70 %68
OpBranch %127
%127 = OpLabel
%73 = OpBitwiseXor %5 %27 %28
%74 = OpAccessChain %42 %13 %73
%75 = OpLoad %10 %74
%76 = OpIAdd %5 %27 %35
%77 = OpBitwiseAnd %5 %76 %39
%79 = OpULessThan %71 %77 %28
%78 = OpAccessChain %32 %31 %77
OpSelectionMerge %129 None
OpBranchConditional %79 %128 %129
%128 = OpLabel
OpStore %78 %75
OpBranch %129
%129 = OpLabel
%80 = OpBitwiseXor %5 %27 %35
%81 = OpAccessChain %42 %13 %80
%82 = OpLoad %10 %81
%83 = OpBitwiseXor %5 %27 %39
%84 = OpIMul %5 %83 %28
%85 = OpIAdd %5 %24 %84
%86 = OpAccessChain %42 %17 %85
%87 = OpLoad %10 %86
%88 = OpIMul %5 %83 %28
%89 = OpIAdd %5 %35 %88
%90 = OpAccessChain %42 %17 %89
%91 = OpLoad %10 %90
%92 = OpIMul %5 %83 %28
%93 = OpIAdd %5 %37 %92
%94 = OpAccessChain %42 %17 %93
%95 = OpLoad %10 %94
%96 = OpIMul %5 %83 %28
%97 = OpIAdd %5 %39 %96
%98 = OpAccessChain %42 %17 %97
%99 = OpLoad %10 %98
%100 = OpFAdd %10 %87 %82
%101 = OpFAdd %10 %91 %82
%102 = OpFAdd %10 %95 %82
%103 = OpFAdd %10 %99 %82
%104 = OpLoad %10 %33
%105 = OpLoad %10 %34
%106 = OpLoad %10 %36
%107 = OpLoad %10 %38
%108 = OpFAdd %10 %100 %104
%109 = OpFAdd %10 %101 %105
%110 = OpFAdd %10 %102 %106
%111 = OpFAdd %10 %103 %107
%112 = OpIMul %5 %25 %28
%113 = OpBitcast %5 %108
%114 = OpBitcast %5 %109
%115 = OpBitcast %5 %110
%116 = OpBitcast %5 %111
%118 = OpCompositeConstruct %117 %113 %113 %113 %113
OpImageWrite %18 %112 %118
%119 = OpCompositeConstruct %117 %114 %114 %114 %114
%120 = OpIAdd %5 %112 %35
OpImageWrite %18 %120 %119
%121 = OpCompositeConstruct %117 %115 %115 %115 %115
%122 = OpIAdd %5 %112 %37
OpImageWrite %18 %122 %121
%123 = OpCompositeConstruct %117 %116 %116 %116 %116
%124 = OpIAdd %5 %112 %39
OpImageWrite %18 %124 %123
OpReturn
OpFunctionEnd
#endif
