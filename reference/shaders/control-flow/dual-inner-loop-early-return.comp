#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uint _50;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

void main()
{
    uint _23;
    uint _25;
    uint _37;
    for (;;)
    {
        _23 = 0u;
        _25 = gl_GlobalInvocationID.y;
        uint _27;
        uint _29;
        bool ladder_phi_8;
        uint frontier_phi_7_pred_pred;
        uint frontier_phi_7_pred_pred_1;
        for (;;)
        {
            _27 = 0u;
            _29 = _25;
            bool ladder_phi_7_pred;
            bool _31;
            for (;;)
            {
                _31 = _29 < 10u;
                if (_31)
                {
                    ladder_phi_7_pred = true;
                    frontier_phi_7_pred_pred = gl_GlobalInvocationID.y;
                    frontier_phi_7_pred_pred_1 = 50u;
                    break;
                }
                else
                {
                    if (!(gl_GlobalInvocationID.z < 10u))
                    {
                        uint _26 = _29 + 1u;
                        uint _28 = _27 + 1u;
                        if (int(_28) < int(20u))
                        {
                            _27 = _28;
                            _29 = _26;
                            continue;
                        }
                        else
                        {
                            ladder_phi_7_pred = false;
                            frontier_phi_7_pred_pred = _26;
                            frontier_phi_7_pred_pred_1 = _50;
                            break;
                        }
                    }
                    ladder_phi_7_pred = true;
                    frontier_phi_7_pred_pred = gl_GlobalInvocationID.y;
                    frontier_phi_7_pred_pred_1 = 70u;
                    break;
                }
            }
            if (ladder_phi_7_pred)
            {
                ladder_phi_8 = true;
                break;
            }
            uint _24 = _23 + 1u;
            if (int(_24) < int(10u))
            {
                _23 = _24;
                _25 = frontier_phi_7_pred_pred;
                continue;
            }
            else
            {
                ladder_phi_8 = false;
                break;
            }
        }
        if (ladder_phi_8)
        {
            _37 = frontier_phi_7_pred_pred_1;
            break;
        }
        _37 = 80u;
        break;
    }
    imageStore(_8, int(gl_GlobalInvocationID.x), uvec4(_37));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 70
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %44 "ladder_phi_7.pred"
OpName %47 "ladder_phi_8"
OpName %48 "frontier_phi_7.pred.pred"
OpName %49 "frontier_phi_7.pred.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonReadable
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%30 = OpTypeBool
%32 = OpConstant %5 10
%34 = OpConstant %5 70
%35 = OpConstant %5 50
%38 = OpConstant %5 80
%39 = OpTypeVector %5 4
%42 = OpConstant %5 20
%45 = OpConstantFalse %30
%46 = OpConstantTrue %30
%3 = OpFunction %1 None %2
%4 = OpLabel
%50 = OpUndef %5
OpBranch %51
%51 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
OpBranch %52
%52 = OpLabel
OpLoopMerge %65 %66 None
OpBranch %53
%53 = OpLabel
%23 = OpPhi %5 %15 %52 %24 %62
%25 = OpPhi %5 %19 %52 %48 %62
OpLoopMerge %63 %62 None
OpBranch %54
%54 = OpLabel
%27 = OpPhi %5 %15 %53 %28 %57
%29 = OpPhi %5 %25 %53 %26 %57
%31 = OpULessThan %30 %29 %32
OpLoopMerge %60 %57 None
OpBranch %67
%67 = OpLabel
OpSelectionMerge %68 None
OpBranchConditional %31 %59 %55
%59 = OpLabel
OpBranch %60
%55 = OpLabel
%36 = OpULessThan %30 %22 %32
OpSelectionMerge %58 None
OpBranchConditional %36 %58 %56
%56 = OpLabel
OpBranch %57
%58 = OpLabel
OpBranch %60
%68 = OpLabel
OpUnreachable
%57 = OpLabel
%26 = OpIAdd %5 %29 %18
%28 = OpIAdd %5 %27 %18
%41 = OpSLessThan %30 %28 %42
OpBranchConditional %41 %54 %60
%60 = OpLabel
%44 = OpPhi %30 %45 %57 %46 %59 %46 %58
%48 = OpPhi %5 %26 %57 %19 %59 %19 %58
%49 = OpPhi %5 %50 %57 %35 %59 %34 %58
OpSelectionMerge %61 None
OpBranchConditional %44 %63 %61
%61 = OpLabel
OpBranch %62
%62 = OpLabel
%24 = OpIAdd %5 %23 %18
%43 = OpSLessThan %30 %24 %32
OpBranchConditional %43 %53 %63
%63 = OpLabel
%47 = OpPhi %30 %45 %62 %46 %60
OpSelectionMerge %64 None
OpBranchConditional %47 %65 %64
%64 = OpLabel
OpBranch %65
%66 = OpLabel
OpBranch %52
%65 = OpLabel
%37 = OpPhi %5 %38 %64 %49 %63
%40 = OpCompositeConstruct %39 %37 %37 %37 %37
OpImageWrite %9 %16 %40
OpReturn
OpFunctionEnd
#endif
