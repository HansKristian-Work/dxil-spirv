#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

void main()
{
    uint _20;
    if (gl_GlobalInvocationID.z == 0u)
    {
        _20 = 0u;
    }
    else
    {
        uint _24;
        uint _25;
        _24 = 0u;
        _25 = 0u;
        uint _21;
        for (;;)
        {
            _21 = imageLoad(_8, int(_25)).x + _24;
            uint _26 = _25 + 1u;
            if (_26 == gl_GlobalInvocationID.z)
            {
                break;
            }
            else
            {
                _24 = _21;
                _25 = _26;
            }
        }
        _20 = _21;
    }
    imageStore(_8, int(0u), uvec4(_20));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 37
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 2
%17 = OpTypeBool
%19 = OpConstant %5 0
%22 = OpTypeVector %5 4
%30 = OpConstant %5 1
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %32
%32 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%18 = OpIEqual %17 %16 %19
OpSelectionMerge %36 None
OpBranchConditional %18 %36 %33
%33 = OpLabel
OpBranch %34
%34 = OpLabel
%24 = OpPhi %5 %19 %33 %21 %34
%25 = OpPhi %5 %19 %33 %26 %34
%27 = OpShiftLeftLogical %5 %25 %15
%28 = OpImageRead %22 %9 %25
%29 = OpCompositeExtract %5 %28 0
%21 = OpIAdd %5 %29 %24
%26 = OpIAdd %5 %25 %30
%31 = OpIEqual %17 %26 %16
OpLoopMerge %35 %34 None
OpBranchConditional %31 %35 %34
%35 = OpLabel
OpBranch %36
%36 = OpLabel
%20 = OpPhi %5 %19 %32 %21 %35
%23 = OpCompositeConstruct %22 %20 %20 %20 %20
OpImageWrite %9 %19 %23
OpReturn
OpFunctionEnd
#endif
