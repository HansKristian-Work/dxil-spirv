#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

void main()
{
    if (!(gl_GlobalInvocationID.y == 0u))
    {
        uint _24 = 0u;
        for (;;)
        {
            switch (gl_GlobalInvocationID.x)
            {
                case 0u:
                {
                    imageStore(_8, int(0u), uvec4(imageLoad(_8, int(0u)).x));
                    break;
                }
                case 1u:
                {
                    imageStore(_8, int(40u), uvec4(imageLoad(_8, int(40u)).x));
                    break;
                }
                case 5u:
                {
                    imageStore(_8, int(60u), uvec4(imageLoad(_8, int(60u)).x));
                    break;
                }
                default:
                {
                    imageStore(_8, int(100u), uvec4(imageLoad(_8, int(100u)).x));
                    break;
                }
            }
            uint _25 = _24 + 1u;
            if (_25 == gl_GlobalInvocationID.y)
            {
                break;
            }
            else
            {
                _24 = _25;
                continue;
            }
        }
    }
    imageStore(_8, int(1u), uvec4(0u));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 54
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%20 = OpTypeBool
%22 = OpTypeVector %5 4
%26 = OpConstant %5 100
%33 = OpConstant %5 40
%37 = OpConstant %5 60
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %42
%42 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%21 = OpIEqual %20 %19 %15
OpSelectionMerge %53 None
OpBranchConditional %21 %53 %43
%43 = OpLabel
OpBranch %44
%44 = OpLabel
%24 = OpPhi %5 %15 %43 %25 %51
OpLoopMerge %52 %51 None
OpBranch %45
%45 = OpLabel
OpSelectionMerge %50 None
OpSwitch %16 %49 0 %48 1 %47 5 %46
%46 = OpLabel
%38 = OpImageRead %22 %9 %37
%39 = OpCompositeExtract %5 %38 0
%40 = OpCompositeConstruct %22 %39 %39 %39 %39
OpImageWrite %9 %37 %40
OpBranch %50
%47 = OpLabel
%34 = OpImageRead %22 %9 %33
%35 = OpCompositeExtract %5 %34 0
%36 = OpCompositeConstruct %22 %35 %35 %35 %35
OpImageWrite %9 %33 %36
OpBranch %50
%48 = OpLabel
%30 = OpImageRead %22 %9 %15
%31 = OpCompositeExtract %5 %30 0
%32 = OpCompositeConstruct %22 %31 %31 %31 %31
OpImageWrite %9 %15 %32
OpBranch %50
%49 = OpLabel
%27 = OpImageRead %22 %9 %26
%28 = OpCompositeExtract %5 %27 0
%29 = OpCompositeConstruct %22 %28 %28 %28 %28
OpImageWrite %9 %26 %29
OpBranch %50
%50 = OpLabel
OpBranch %51
%51 = OpLabel
%25 = OpIAdd %5 %24 %18
%41 = OpIEqual %20 %25 %19
OpBranchConditional %41 %52 %44
%52 = OpLabel
OpBranch %53
%53 = OpLabel
%23 = OpCompositeConstruct %22 %15 %15 %15 %15
OpImageWrite %9 %18 %23
OpReturn
OpFunctionEnd
#endif
