#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

void main()
{
    uint _25;
    if (gl_GlobalInvocationID.x == 0u)
    {
        _25 = 0u;
    }
    else
    {
        uint _26;
        uint _29 = 0u;
        uint _31 = 0u;
        bool _32;
        for (;;)
        {
            _32 = gl_GlobalInvocationID.y == 0u;
            uint frontier_phi_4_pred;
            if (_32)
            {
                frontier_phi_4_pred = _31;
            }
            else
            {
                uint _33;
                uint _35 = 0u;
                uint _37 = _31;
                bool _38;
                for (;;)
                {
                    _38 = gl_GlobalInvocationID.z == 0u;
                    uint frontier_phi_8_pred;
                    if (_38)
                    {
                        frontier_phi_8_pred = _37;
                    }
                    else
                    {
                        uint _41;
                        uint _42;
                        _41 = _37;
                        _42 = 0u;
                        uint _39;
                        for (;;)
                        {
                            uint _45 = (_35 ^ _29) ^ _42;
                            _39 = imageLoad(_8, int(_45)).x + _41;
                            uint _43 = _42 + 1u;
                            if (_43 == gl_GlobalInvocationID.z)
                            {
                                break;
                            }
                            else
                            {
                                _41 = _39;
                                _42 = _43;
                            }
                        }
                        frontier_phi_8_pred = _39;
                    }
                    _33 = frontier_phi_8_pred;
                    uint _36 = _35 + 1u;
                    if (_36 == gl_GlobalInvocationID.y)
                    {
                        break;
                    }
                    else
                    {
                        _35 = _36;
                        _37 = _33;
                        continue;
                    }
                }
                frontier_phi_4_pred = _33;
            }
            _26 = frontier_phi_4_pred;
            uint _30 = _29 + 1u;
            if (_30 == gl_GlobalInvocationID.x)
            {
                break;
            }
            else
            {
                _29 = _30;
                _31 = _26;
                continue;
            }
        }
        _25 = _26;
    }
    imageStore(_8, int(0u), uvec4(_25));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 69
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %50 "frontier_phi_8.pred"
OpName %51 "frontier_phi_4.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%27 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %52
%52 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpIEqual %23 %16 %15
OpSelectionMerge %68 None
OpBranchConditional %24 %68 %53
%53 = OpLabel
OpBranch %54
%54 = OpLabel
%29 = OpPhi %5 %15 %53 %30 %66
%31 = OpPhi %5 %15 %53 %26 %66
%32 = OpIEqual %23 %19 %15
OpLoopMerge %67 %66 None
OpBranch %55
%55 = OpLabel
OpSelectionMerge %65 None
OpBranchConditional %32 %65 %56
%56 = OpLabel
OpBranch %57
%57 = OpLabel
%35 = OpPhi %5 %15 %56 %36 %63
%37 = OpPhi %5 %31 %56 %33 %63
%38 = OpIEqual %23 %22 %15
OpLoopMerge %64 %63 None
OpBranch %58
%58 = OpLabel
OpSelectionMerge %62 None
OpBranchConditional %38 %62 %59
%59 = OpLabel
OpBranch %60
%60 = OpLabel
%41 = OpPhi %5 %37 %59 %39 %60
%42 = OpPhi %5 %15 %59 %43 %60
%44 = OpBitwiseXor %5 %35 %29
%45 = OpBitwiseXor %5 %44 %42
%46 = OpShiftLeftLogical %5 %45 %21
%47 = OpImageRead %27 %9 %45
%48 = OpCompositeExtract %5 %47 0
%39 = OpIAdd %5 %48 %41
%43 = OpIAdd %5 %42 %18
%49 = OpIEqual %23 %43 %22
OpLoopMerge %61 %60 None
OpBranchConditional %49 %61 %60
%61 = OpLabel
OpBranch %62
%62 = OpLabel
%50 = OpPhi %5 %37 %58 %39 %61
%33 = OpCopyObject %5 %50
OpBranch %63
%63 = OpLabel
%36 = OpIAdd %5 %35 %18
%40 = OpIEqual %23 %36 %19
OpBranchConditional %40 %64 %57
%64 = OpLabel
OpBranch %65
%65 = OpLabel
%51 = OpPhi %5 %31 %55 %33 %64
%26 = OpCopyObject %5 %51
OpBranch %66
%66 = OpLabel
%30 = OpIAdd %5 %29 %18
%34 = OpIEqual %23 %30 %16
OpBranchConditional %34 %67 %54
%67 = OpLabel
OpBranch %68
%68 = OpLabel
%25 = OpPhi %5 %15 %52 %26 %67
%28 = OpCompositeConstruct %27 %25 %25 %25 %25
OpImageWrite %9 %15 %28
OpReturn
OpFunctionEnd
#endif
