#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

void main()
{
    uint _35;
    uint _16;
    uint _19;
    uint _22;
    bool _24;
    for (;;)
    {
        _16 = gl_GlobalInvocationID.x;
        _19 = gl_GlobalInvocationID.y;
        _22 = gl_GlobalInvocationID.z;
        _24 = _16 == 10u;
        uint _31;
        if (_24)
        {
            if (_22 == 40u)
            {
                _35 = _19 * 10u;
                break;
            }
            _31 = _19;
        }
        else
        {
            uint frontier_phi_4_2_ladder;
            if (_19 == 20u)
            {
                if (_22 == 50u)
                {
                    _35 = _16 * 24u;
                    break;
                }
                frontier_phi_4_2_ladder = _22;
            }
            else
            {
                frontier_phi_4_2_ladder = 0u;
            }
            _31 = frontier_phi_4_2_ladder;
        }
        _35 = _31 + _16;
        break;
    }
    imageStore(_8, int(0u), uvec4(_35));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 54
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %40 "frontier_phi_4.2.ladder"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonReadable
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%25 = OpConstant %5 10
%27 = OpConstant %5 40
%29 = OpConstant %5 20
%34 = OpConstant %5 50
%37 = OpTypeVector %5 4
%39 = OpConstant %5 24
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %41
%41 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpIEqual %23 %16 %25
OpLoopMerge %52 %53 None
OpBranch %42
%42 = OpLabel
OpSelectionMerge %50 None
OpBranchConditional %24 %48 %43
%43 = OpLabel
%28 = OpIEqual %23 %19 %29
OpSelectionMerge %46 None
OpBranchConditional %28 %44 %46
%44 = OpLabel
%33 = OpIEqual %23 %22 %34
OpSelectionMerge %45 None
OpBranchConditional %33 %47 %45
%45 = OpLabel
OpBranch %46
%46 = OpLabel
%40 = OpPhi %5 %15 %43 %22 %45
OpBranch %50
%47 = OpLabel
%36 = OpIMul %5 %16 %39
OpBranch %52
%48 = OpLabel
%26 = OpIEqual %23 %22 %27
OpSelectionMerge %49 None
OpBranchConditional %26 %51 %49
%49 = OpLabel
OpBranch %50
%50 = OpLabel
%31 = OpPhi %5 %40 %46 %19 %49
%32 = OpIAdd %5 %31 %16
OpBranch %52
%51 = OpLabel
%30 = OpIMul %5 %19 %25
OpBranch %52
%52 = OpLabel
%35 = OpPhi %5 %30 %51 %32 %50 %36 %47
%38 = OpCompositeConstruct %37 %35 %35 %35 %35
OpImageWrite %9 %15 %38
OpReturn
%53 = OpLabel
OpBranch %41
OpFunctionEnd
#endif
