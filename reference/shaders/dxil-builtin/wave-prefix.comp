#version 460
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;
layout(set = 0, binding = 1, r32ui) uniform writeonly uimageBuffer _9;
layout(set = 0, binding = 2, r32ui) uniform writeonly uimageBuffer _10;

void main()
{
    imageStore(_8, int(gl_GlobalInvocationID.x * 2u), uvec4(subgroupBallotExclusiveBitCount(subgroupBallot(gl_GlobalInvocationID.x < 100u))));
    imageStore(_8, int(gl_GlobalInvocationID.x * 2u), uvec4(subgroupExclusiveAdd(gl_GlobalInvocationID.x)));
    uint _36 = (gl_GlobalInvocationID.x << 3u) | 4u;
    imageStore(_8, int(_36 >> 2u), uvec4(subgroupExclusiveMul(gl_GlobalInvocationID.x)));
    imageStore(_9, int(gl_GlobalInvocationID.x * 2u), uvec4(subgroupExclusiveAdd(gl_GlobalInvocationID.x)));
    imageStore(_9, int(_36 >> 2u), uvec4(subgroupExclusiveMul(gl_GlobalInvocationID.x)));
    float _47 = float(gl_GlobalInvocationID.x);
    imageStore(_10, int(gl_GlobalInvocationID.x * 2u), uvec4(uint(subgroupExclusiveAdd(_47))));
    imageStore(_10, int(_36 >> 2u), uvec4(uint(subgroupExclusiveMul(_47))));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 57
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpCapability GroupNonUniformArithmetic
OpCapability GroupNonUniformBallot
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %16
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonReadable
OpDecorate %9 DescriptorSet 0
OpDecorate %9 Binding 1
OpDecorate %9 NonReadable
OpDecorate %10 DescriptorSet 0
OpDecorate %10 Binding 2
OpDecorate %10 NonReadable
OpDecorate %16 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpVariable %7 UniformConstant
%10 = OpVariable %7 UniformConstant
%14 = OpTypeVector %5 3
%15 = OpTypePointer Input %14
%16 = OpVariable %15 Input
%17 = OpTypePointer Input %5
%19 = OpConstant %5 0
%21 = OpTypeBool
%23 = OpConstant %5 100
%24 = OpTypeVector %5 4
%26 = OpConstant %5 3
%30 = OpConstant %5 2
%37 = OpConstant %5 4
%46 = OpTypeFloat 32
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %56
%56 = OpLabel
%11 = OpLoad %6 %10
%12 = OpLoad %6 %9
%13 = OpLoad %6 %8
%18 = OpAccessChain %17 %16 %19
%20 = OpLoad %5 %18
%22 = OpULessThan %21 %20 %23
%25 = OpGroupNonUniformBallot %24 %26 %22
%27 = OpGroupNonUniformBallotBitCount %5 %26 ExclusiveScan %25
%28 = OpShiftLeftLogical %5 %20 %26
%29 = OpIMul %5 %20 %30
%31 = OpCompositeConstruct %24 %27 %27 %27 %27
OpImageWrite %13 %29 %31
%32 = OpGroupNonUniformIAdd %5 %26 ExclusiveScan %20
%33 = OpIMul %5 %20 %30
%34 = OpCompositeConstruct %24 %32 %32 %32 %32
OpImageWrite %13 %33 %34
%35 = OpGroupNonUniformIMul %5 %26 ExclusiveScan %20
%36 = OpBitwiseOr %5 %28 %37
%38 = OpShiftRightLogical %5 %36 %30
%39 = OpCompositeConstruct %24 %35 %35 %35 %35
OpImageWrite %13 %38 %39
%40 = OpGroupNonUniformIAdd %5 %26 ExclusiveScan %20
%41 = OpIMul %5 %20 %30
%42 = OpCompositeConstruct %24 %40 %40 %40 %40
OpImageWrite %12 %41 %42
%43 = OpGroupNonUniformIMul %5 %26 ExclusiveScan %20
%44 = OpShiftRightLogical %5 %36 %30
%45 = OpCompositeConstruct %24 %43 %43 %43 %43
OpImageWrite %12 %44 %45
%47 = OpConvertUToF %46 %20
%48 = OpGroupNonUniformFAdd %46 %26 ExclusiveScan %47
%49 = OpConvertFToU %5 %48
%50 = OpIMul %5 %20 %30
%51 = OpCompositeConstruct %24 %49 %49 %49 %49
OpImageWrite %11 %50 %51
%52 = OpGroupNonUniformFMul %46 %26 ExclusiveScan %47
%53 = OpConvertFToU %5 %52
%54 = OpShiftRightLogical %5 %36 %30
%55 = OpCompositeConstruct %24 %53 %53 %53 %53
OpImageWrite %11 %54 %55
OpReturn
OpFunctionEnd
#endif
