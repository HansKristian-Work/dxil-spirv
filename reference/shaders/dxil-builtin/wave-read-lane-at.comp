#version 460
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_shader_subgroup_ballot : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

void main()
{
    uint _27 = (gl_SubgroupSize + 4294967295u) & gl_GlobalInvocationID.x;
    uint _41 = gl_GlobalInvocationID.x * 3u;
    imageStore(_8, int(_41), uvec4(subgroupBroadcast(gl_GlobalInvocationID.x, 11u) + subgroupShuffle(gl_GlobalInvocationID.x, _27)));
    imageStore(_8, int(_41 + 1u), uvec4(subgroupBroadcast(gl_GlobalInvocationID.y, 11u) + subgroupShuffle(gl_GlobalInvocationID.y, _27)));
    imageStore(_8, int(_41 + 2u), uvec4(subgroupBroadcast(gl_GlobalInvocationID.z, 11u) + subgroupShuffle(gl_GlobalInvocationID.z, _27)));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 49
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpCapability GroupNonUniform
OpCapability GroupNonUniformBallot
OpCapability GroupNonUniformShuffle
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12 %23
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonReadable
OpDecorate %12 BuiltIn GlobalInvocationId
OpDecorate %23 BuiltIn SubgroupSize
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpVariable %13 Input
%26 = OpConstant %5 4294967295
%29 = OpConstant %5 3
%33 = OpConstant %5 11
%40 = OpConstant %5 12
%42 = OpTypeVector %5 4
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %48
%48 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpLoad %5 %23
%25 = OpIAdd %5 %24 %26
%27 = OpBitwiseAnd %5 %25 %16
%28 = OpGroupNonUniformShuffle %5 %29 %16 %27
%30 = OpGroupNonUniformShuffle %5 %29 %19 %27
%31 = OpGroupNonUniformShuffle %5 %29 %22 %27
%32 = OpGroupNonUniformBroadcast %5 %29 %16 %33
%34 = OpGroupNonUniformBroadcast %5 %29 %19 %33
%35 = OpGroupNonUniformBroadcast %5 %29 %22 %33
%36 = OpIAdd %5 %32 %28
%37 = OpIAdd %5 %34 %30
%38 = OpIAdd %5 %35 %31
%39 = OpIMul %5 %16 %40
%41 = OpIMul %5 %16 %29
%43 = OpCompositeConstruct %42 %36 %36 %36 %36
OpImageWrite %9 %41 %43
%44 = OpCompositeConstruct %42 %37 %37 %37 %37
%45 = OpIAdd %5 %41 %18
OpImageWrite %9 %45 %44
%46 = OpCompositeConstruct %42 %38 %38 %38 %38
%47 = OpIAdd %5 %41 %21
OpImageWrite %9 %47 %46
OpReturn
OpFunctionEnd
#endif
