#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require

struct _13
{
    float _m0;
};

struct _17
{
    vec4 _m0;
};

layout(set = 40, binding = 30) uniform accelerationStructureEXT AS;
layout(set = 20, binding = 10) uniform writeonly image2D IMG;
layout(location = 0) rayPayloadEXT _13 _15;
layout(location = 1) rayPayloadEXT _17 _19;

void main()
{
    traceRayEXT(AS, 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 1);
    traceRayEXT(AS, 0u, 1u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 0);
    imageStore(IMG, ivec2(uvec2(0u)), vec4(_15._m0 + _19._m0.x, _15._m0 + _19._m0.y, _15._m0 + _19._m0.z, _15._m0 + _19._m0.w));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.4
; Generator: Unknown(30017); 21022
; Bound: 54
; Schema: 0
OpCapability Shader
OpCapability UniformBufferArrayDynamicIndexing
OpCapability SampledImageArrayDynamicIndexing
OpCapability StorageBufferArrayDynamicIndexing
OpCapability StorageImageArrayDynamicIndexing
OpCapability StorageImageWriteWithoutFormat
OpCapability RayTracingKHR
OpCapability RuntimeDescriptorArray
OpCapability UniformBufferArrayNonUniformIndexing
OpCapability SampledImageArrayNonUniformIndexing
OpCapability StorageBufferArrayNonUniformIndexing
OpCapability StorageImageArrayNonUniformIndexing
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_ray_tracing"
OpMemoryModel Logical GLSL450
OpEntryPoint RayGenerationNV %3 "main" %8 %12 %15 %19
OpName %3 "main"
OpName %8 "AS"
OpName %12 "IMG"
OpName %13 ""
OpName %17 ""
OpDecorate %8 DescriptorSet 40
OpDecorate %8 Binding 30
OpDecorate %12 DescriptorSet 20
OpDecorate %12 Binding 10
OpDecorate %12 NonReadable
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 1
%6 = OpTypeAccelerationStructureKHR
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpTypeFloat 32
%10 = OpTypeImage %9 2D 0 0 0 2 Unknown
%11 = OpTypePointer UniformConstant %10
%12 = OpVariable %11 UniformConstant
%13 = OpTypeStruct %9
%14 = OpTypePointer RayPayloadNV %13
%15 = OpVariable %14 RayPayloadNV
%16 = OpTypeVector %9 4
%17 = OpTypeStruct %16
%18 = OpTypePointer RayPayloadNV %17
%19 = OpVariable %18 RayPayloadNV
%21 = OpTypeInt 32 0
%22 = OpConstant %21 0
%23 = OpConstant %9 1
%24 = OpConstant %9 0
%25 = OpConstant %9 2
%26 = OpConstant %9 3
%27 = OpConstant %9 4
%28 = OpTypeVector %9 3
%31 = OpTypePointer RayPayloadNV %16
%39 = OpConstant %21 1
%42 = OpTypePointer RayPayloadNV %9
%50 = OpTypeVector %21 2
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %53
%53 = OpLabel
%20 = OpLoad %6 %8
%29 = OpCompositeConstruct %28 %23 %25 %26
%30 = OpCompositeConstruct %28 %24 %24 %23
OpTraceRayKHR %20 %22 %22 %22 %22 %22 %29 %23 %30 %27 %19
%32 = OpInBoundsAccessChain %31 %19 %22
%33 = OpLoad %16 %32
%34 = OpCompositeExtract %9 %33 0
%35 = OpCompositeExtract %9 %33 1
%36 = OpCompositeExtract %9 %33 2
%37 = OpCompositeExtract %9 %33 3
%38 = OpLoad %6 %8
%40 = OpCompositeConstruct %28 %23 %25 %26
%41 = OpCompositeConstruct %28 %24 %24 %23
OpTraceRayKHR %38 %22 %39 %22 %22 %22 %40 %23 %41 %27 %15
%43 = OpInBoundsAccessChain %42 %15 %22
%44 = OpLoad %9 %43
%45 = OpFAdd %9 %44 %34
%46 = OpFAdd %9 %44 %35
%47 = OpFAdd %9 %44 %36
%48 = OpFAdd %9 %44 %37
%49 = OpLoad %10 %12
%51 = OpCompositeConstruct %50 %22 %22
%52 = OpCompositeConstruct %16 %45 %46 %47 %48
OpImageWrite %49 %51 %52
OpReturn
OpFunctionEnd
#endif
