groupshared uint data[64];
groupshared uint64_t data64[64];

RWByteAddressBuffer Buf : register(u0);
RWByteAddressBuffer Buf64 : register(u1);

[numthreads(64, 1, 1)]
void main(uint index : SV_DispatchThreadID)
{
	{
		uint res = 0;
		uint compare_value = 20;
		uint value = 30;
		uint output;

		InterlockedCompareExchange(data[index], compare_value, value, output);
		res += output;
		InterlockedCompareExchange(data[index], compare_value, value, output);
		Buf.Store(index * 4, res);
	}

	{
		uint64_t res = 0;
		uint64_t compare_value = 20;
		uint64_t value = 30;
		uint64_t output;

		InterlockedCompareExchange(data64[index], compare_value, value, output);
		res += output;
		InterlockedCompareExchange(data64[index], compare_value, value, output);
		Buf64.Store<uint64_t>(index * 8, res);
	}
}
